<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>goroutine scheduler</title>
      <link href="/2018/08/14/goroutine-scheduler/"/>
      <url>/2018/08/14/goroutine-scheduler/</url>
      <content type="html"><![CDATA[<h2 id="一、Goroutine调度器"><a href="#一、Goroutine调度器" class="headerlink" title="一、Goroutine调度器"></a>一、Goroutine调度器</h2><p>goroutine是golang内置的协程，当我需要并发执行一些任务的时候，在go语言中可以使用go关键字来创建goroutine。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">// dosth</span></span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>相比于c++和java等语言创建线程，go语言创建的goroutine是在进程和线程的基础上做更高层次的抽象，Go采用了<strong>用户层轻量级thread</strong>或者说是<strong>类coroutine</strong>的概念来解决这些问题，Go将之称为”<strong>goroutine</strong>“。goroutine占用的资源非常小(<a href="http://tonybai.com/2014/11/04/some-changes-in-go-1-4/" target="_blank" rel="noopener">Go 1.4</a>将每个goroutine stack的size默认设置为2k)，goroutine调度的切换也不用陷入(trap)操作系统内核层完成，代价很低。因此，一个Go程序中可以创建成千上万个并发的goroutine。所有的Go代码都在goroutine中执行，哪怕是go的runtime也不例外。将这些goroutines按照一定算法放到“<em>CPU</em>”上执行的程序就称为<strong>goroutine调度器</strong>或<strong>goroutine scheduler</strong>。</p><p>但是针对操作系统层面，操作系统是不知道goroutine的存在的，goroutine的调度全部是靠自己内部完成的，实现Go程序内goroutine之间“公平”的竞争“CPU”资源，这个任务就落到了Go runtime头上，要知道在一个Go程序中，除了用户代码，剩下的就是go runtime了。</p><h2 id="二、Go调度器模型与演化过程"><a href="#二、Go调度器模型与演化过程" class="headerlink" title="二、Go调度器模型与演化过程"></a>二、Go调度器模型与演化过程</h2><p>goroutine是通过三种基本对象互相协作(GMP)，来实现在用户空间管理和调度并发任务。</p><p>基本关系是</p><p><img src="/2018/08/14/goroutine-scheduler/sketch.png" alt="来自go语言学习笔记"></p><p><strong>此图来自雨痕的go语言学习笔记</strong></p><blockquote><ol><li><p>首先是Processor(简称P):</p><p>​    他的作用类似于CPU核，用来控制可同时并发执行的任务数，每个工作线程都必须绑定一个有效P才被允许执行任务。否则只能休眠。直到有空闲P时被唤醒，P还为线程提供执行资源，比如<code>内存分配</code>，<code>本地任务队列</code>等。线程独享所绑定的P资源，可以在无锁状态下执行高效操作。</p></li><li><p>其次是Goroutine(简称G):</p><p>​    进程内一切都在以goroutine方式运行，包括运行时相关的服务，以及mani.main入口函数。需要指出，G并非执行体，他仅仅保存并发任务状态，为任务执行提供所需的栈内存空间。G任务创建后被放置在P本地队列火全局队列，等待工作线程调度执行</p></li><li><p>最后是系统线程machine(简称M):</p><p>​    实际执行体是系统线程和p绑定，以调度循环方式不停执行G并发任务。M通过修改寄存器，将执行栈指向G自带的栈内存，并在此空间内分配堆栈帧，执行任务函数。当需要中途切换的时候，只要将相关寄存器值保存回G空间即可维持状态，任何M都可以据此恢复执行。线程仅负责执行。不在持有状态，这是并发任务跨线程调度，实现多路复用的根本所在。</p></li></ol></blockquote><p>虽然<strong>P/M</strong>构成执行组合体，但两者数量不是一一对应的。通常情况下，p的数量相对恒定，默认是cpu的核心数。但是也可以更多或者更少，可以通过<code>runtime.GOMAXPROCS()</code>函数来设置。但是<strong>M</strong>则是由调度器按需创建的，举例来说，当M因陷入系统调用而长时间阻塞时，p会被健康线程抢回去，去新建（或唤醒）一个去执行其他任务，这样M的数量就会增长。</p><p><strong>优点：</strong></p><p>​    因为G初始栈仅有2KB,且创建操作只是在用户空间简单的分配对象，远比要进入内核态分配线程要简单的多。</p><p>调度器让多个M进入调度循环，不停获取并执行任务，这样就可以创建成千上万个并发任务。</p><p><strong>疑问：</strong></p><p>​    其实按照上面的描述，goroutine调度队列只需要有M和g就可以了，用户呢创建goroutine，go运行时机制去创建线程来调度goroutine就可以，为什么要增加一个p来作为中间层呢？</p><p><strong>解析：</strong></p><p>​    查了资料之后，发现原来<a href="https://blog.golang.org/go-version-1-is-released" target="_blank" rel="noopener">Go 1.0正式发布</a>的时候确实是实现的G-M模型，并没有P的存在，但是此模型存在一系列不足，前Intel blackbelt工程师、现Google工程师<a href="https://github.com/dvyukov" target="_blank" rel="noopener">Dmitry Vyukov</a>在其《<a href="https://docs.google.com/document/d/1TTj4T2JO42uD5ID9e89oa0sLKhJYD0Y_kqxDv3I3XMw/edit#!" target="_blank" rel="noopener">Scalable Go Scheduler Design</a>》一文中指出了<strong>G-M模型</strong>的一个重要不足： 限制了Go并发程序的伸缩性，尤其是对那些有高吞吐或并行计算需求的服务程序。主要体现在如下几个方面：</p><blockquote><ol><li>单一全局互斥锁(Sched.Lock)和集中状态存储的存在导致所有goroutine相关操作，比如：创建、重新调度等都要上锁；</li><li>goroutine传递问题：M经常在M之间传递”可运行”的goroutine，这导致调度延迟增大以及额外的性能损耗；</li><li>每个M做内存缓存，导致内存占用过高，数据局部性较差；</li><li>由于syscall调用而形成的剧烈的worker thread阻塞和解除阻塞，导致额外的性能损耗</li></ol></blockquote><p>于是Dmitry Vyukov亲自操刀改进Go scheduler，在<a href="https://golang.org/doc/go1.1" target="_blank" rel="noopener">Go 1.1</a>中实现了<strong>G-P-M调度模型</strong>和<a href="http://supertech.csail.mit.edu/papers/steal.pdf" target="_blank" rel="noopener">work stealing算法</a>，这个模型一直沿用至今</p><blockquote><ul><li>G: 表示goroutine，存储了goroutine的执行stack信息、goroutine状态以及goroutine的任务函数等；另外G对象是可以重用的。</li><li>P: 表示逻辑processor，P的数量决定了系统内最大可<strong>并行</strong>的G的数量（前提：系统的物理cpu核数&gt;=P的数量）；P的最大作用还是其拥有的各种G对象队列、链表、一些cache和状态。</li><li>M: M代表着真正的执行计算资源。在绑定有效的p后，进入schedule循环；而schedule循环的机制大致是从各种队列、p的本地队列中获取G，切换到G的执行栈上并执行G的函数，调用goexit做清理工作并回到m，如此反复。M并不保留G状态，这是G可以跨M调度的基础。</li></ul></blockquote><p><img src="/2018/08/14/goroutine-scheduler/scheduler.jpg" alt="preview"></p><ul><li><p>当一个OS线程M0陷入阻塞时(一般是channel阻塞或network I/O阻塞或者system call阻塞)，P转而在OS线程M1上运行。调度器保证有足够的线程来运行所以的context P。图中的M1可能是被创建，或者从线程缓存中取出。当M0返回时，它必须尝试取得一个context P来运行goroutine，一般情况下，它会从其他的OS线程那里steal偷一个context P过来，如果没有偷到的话，它就把goroutine放在一个global runqueue里，然后自己就去睡大觉了（放入线程缓存里）。Contexts P们也会周期性的检查global runqueue，否则global runqueue上的goroutine永远无法执行</p></li><li><p>另一种情况是P所分配的任务G很快就执行完了（分配不均），这就导致了一个上下文P闲着没事儿干而系统却任然忙碌。但是如果global runqueue没有任务G了，那么P就不得不从其他的上下文P那里拿一些G来执行。一般来说，如果上下文P从其他的上下文P那里要偷一个任务的话，一般就‘偷’run queue的一半，这就确保了每个OS线程都能充分的使用。</p></li></ul><h2 id="三、调度器状态的查看方法"><a href="#三、调度器状态的查看方法" class="headerlink" title="三、调度器状态的查看方法"></a>三、调度器状态的查看方法</h2><p>Go提供了调度器当前状态的查看方法：使用Go运行时环境变量GODEBUG。 </p><p>GODEBUG这个Go运行时环境变量很是强大，通过给其传入不同的key1=value1,key2=value2… 组合，Go的runtime会输出不同的调试信息，比如在这里我们给GODEBUG传入了”schedtrace=1000″，其含义就是每1000ms，打印输出一次goroutine scheduler的状态，每次一行。每一行各字段含义如下：</p><blockquote><p>SCHED 6016ms: gomaxprocs=4 idleprocs=0 threads=26 spinningthreads=0 idlethreads=20 runqueue=1 [3 4 0 10] </p><p>SCHED：调试信息输出标志字符串，代表本行是goroutine scheduler的输出；</p><p> 6016ms：即从程序启动到输出这行日志的时间； </p><p>gomaxprocs: P的数量；</p><p> idleprocs: 处于idle状态的P的数量；通过gomaxprocs和idleprocs的差值，我们就可知道执行go代码的P的数量； </p><p>threads: os threads的数量，包含scheduler使用的m数量，加上runtime自用的类似sysmon这样的thread的数量； </p><p>spinningthreads: 处于自旋状态的os thread数量； </p><p>idlethread: 处于idle状态的os thread的数量；</p><p> runqueue=1： go scheduler全局队列中G的数量；</p><p> [3 4 0 10]: 分别为4个P的local queue中的G的数量。 </p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://tonybai.com/2017/06/23/an-intro-about-goroutine-scheduler/" target="_blank" rel="noopener">也谈goroutine调度器</a></p><p>Go语言学习笔记<br><a href="https://www.zhihu.com/question/20862617" target="_blank" rel="noopener">Golang 的 goroutine 是如何实现的？</a></p>]]></content>
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go里面的堆栈跟踪</title>
      <link href="/2018/07/18/Go%E9%87%8C%E9%9D%A2%E7%9A%84%E5%A0%86%E6%A0%88%E8%B7%9F%E8%B8%AA/"/>
      <url>/2018/07/18/Go%E9%87%8C%E9%9D%A2%E7%9A%84%E5%A0%86%E6%A0%88%E8%B7%9F%E8%B8%AA/</url>
      <content type="html"><![CDATA[<p>转载翻译，原文地址：<a href="https://www.ardanlabs.com/blog/2015/01/stack-traces-in-go.html" target="_blank" rel="noopener">Stack Traces In Go</a></p><h1 id="Go里面的堆栈跟踪"><a href="#Go里面的堆栈跟踪" class="headerlink" title="Go里面的堆栈跟踪"></a>Go里面的堆栈跟踪</h1><p>在Go语言中有一些调试技巧能帮助我们快速找到问题，有时候你想尽可能多的记录异常但仍觉得不够，搞清楚堆栈的意义有助于定位Bug或者记录更完整的信息。</p><p>本文将讨论堆栈跟踪信息以及如何在堆栈中识别函数所传递的参数。</p><h2 id="Functions-函数的情况"><a href="#Functions-函数的情况" class="headerlink" title="Functions (函数的情况)"></a>Functions (函数的情况)</h2><p>先从这段代码开始：</p><h3 id="清单1"><a href="#清单1" class="headerlink" title="清单1"></a>清单1</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   slice := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">   Example(slice, <span class="string">"hello"</span>, <span class="number">10</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Example</span><span class="params">(slice []<span class="keyword">string</span>, str <span class="keyword">string</span>, i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   <span class="built_in">panic</span>(<span class="string">"Want stack trace"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>清单1</strong>显示了一个程序，其中main函数在第05行调用Example函数.Example函数在第08行声明并接受三个参数，1个string类型的slice, 1个string和1个integer, 。 Example执行的唯一代码是调用第09行的内置函数panic，它会立即生成堆栈跟踪：</p><h3 id="清单2"><a href="#清单2" class="headerlink" title="清单2"></a>清单2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Panic: Want stack trace</span><br><span class="line"></span><br><span class="line">goroutine 1 [running]:</span><br><span class="line">main.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)</span><br><span class="line">        /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</span><br><span class="line">        temp/main.go:9 +0x64</span><br><span class="line">main.main()</span><br><span class="line">        /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</span><br><span class="line">        temp/main.go:5 +0x85</span><br><span class="line"></span><br><span class="line">goroutine 2 [runnable]:</span><br><span class="line">runtime.forcegchelper()</span><br><span class="line">        /Users/bill/go/src/runtime/proc.go:90</span><br><span class="line">runtime.goexit()</span><br><span class="line">        /Users/bill/go/src/runtime/asm_amd64.s:2232 +0x1</span><br><span class="line"></span><br><span class="line">goroutine 3 [runnable]:</span><br><span class="line">runtime.bgsweep()</span><br><span class="line">        /Users/bill/go/src/runtime/mgc0.go:82</span><br><span class="line">runtime.goexit()</span><br><span class="line">        /Users/bill/go/src/runtime/asm_amd64.s:2232 +0x1</span><br></pre></td></tr></table></figure><p><strong>清单2</strong>中的堆栈跟踪显示了panic是存在的所有goroutine,每个程序的状态以及相应goroutine下的调用堆栈。</p><p>正在运行的goroutine和导致堆栈跟踪的goroutine将位于顶部。让我们关注报了panic的goroutine.</p><h3 id="清单3"><a href="#清单3" class="headerlink" title="清单3"></a>清单3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">01 goroutine 1 [running]:</span><br><span class="line">02 main.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)</span><br><span class="line">           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</span><br><span class="line">           temp/main.go:9 +0x64</span><br><span class="line">03 main.main()</span><br><span class="line">           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</span><br><span class="line">           temp/main.go:5 +0x85</span><br></pre></td></tr></table></figure><p>清单三中地 01 行的的堆栈跟踪显示goroutine 1 在panic之前运行，在第 02 行，我们看到panic的代码在package main中的Example函数中。缩进的行显示了次函数所在的代码文件和路径以及正在执行的代码行。在这种情况下，第 09 行的代码正在运行，这是对panic的调用。</p><p>第 03 行显示调用Example的函数的名称，这是main包中的主要功能，在函数名称下面，缩进的行显示了对Example进行调用的代码文件的路径和代码行</p><p>堆栈工资显示goroutine范围内的函数调用链，直到发生panic发生，现在让我们关注传递给Example函数的每个参数的值：</p><h3 id="清单4"><a href="#清单4" class="headerlink" title="清单4"></a>清单4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// Declaration</span><br><span class="line">main.Example(slice []string, str string, i int)</span><br><span class="line"></span><br><span class="line">// Call to Example by main.</span><br><span class="line">slice := make([]string, 2, 4)</span><br><span class="line">Example(slice, &quot;hello&quot;, 10)</span><br><span class="line"></span><br><span class="line">// Stack trace</span><br><span class="line">main.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)</span><br></pre></td></tr></table></figure><p><strong>清单4</strong> 这里展示了在main中带参数调用Example函数时的堆栈信息 。 将堆栈跟踪中的值与函数声明进行比较时，它似乎不匹配。 Example函数的声明接受三个参数，但堆栈跟踪显示六个十六进制值。 要理解值如何与参数匹配的关键需要知道每个参数类型的实现。</p><p>让我们从第一个参数开始，它是一个1个string类型的slice， slice是Go中的引用类型。 这意味着slice的值是一个标题值，其中包含指向某些基础数据的指针。 在slice的情况下，标头值是三字结构，其包含指向底层阵列的指针，slice的长度和容量。 与切片标头关联的值由堆栈跟踪中的前三个值表示：</p><h3 id="清单5"><a href="#清单5" class="headerlink" title="清单5"></a>清单5</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// Slice parameter value</span><br><span class="line">slice := make([]string, 2, 4)</span><br><span class="line"></span><br><span class="line">// Slice header values</span><br><span class="line">Pointer:  0x2080c3f50</span><br><span class="line">Length:   0x2</span><br><span class="line">Capacity: 0x4</span><br><span class="line"></span><br><span class="line">// Declaration</span><br><span class="line">main.Example(slice []string, str string, i int)</span><br><span class="line"></span><br><span class="line">// Stack trace</span><br><span class="line">main.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)</span><br></pre></td></tr></table></figure><p><strong>清单5</strong> 显示了堆栈跟踪中的前三个值如何与slice参数匹配。 第一个值表示指向底层字符串数组的指针。 用于初始化slice的长度和容量的数字与第二个和第三个值匹配 。这三个值表示切片标头的每个值，即Example函数的第一个参数。</p><p><strong>Figure 1</strong></p><p><img src="/2018/07/18/Go里面的堆栈跟踪/Figure3.png" alt=""></p><p>现在让我们看一下第二个参数，它是一个string。 string也是引用类型，但此标头值是不可变的。 字符串的标头值被声明为两部分，包含指向底层字节数组的指针和字符串的长度：</p><h3 id="清单6"><a href="#清单6" class="headerlink" title="清单6"></a>清单6</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// String parameter value</span><br><span class="line">&quot;hello&quot;</span><br><span class="line"></span><br><span class="line">// String header values</span><br><span class="line">Pointer: 0x425c0</span><br><span class="line">Length:  0x5</span><br><span class="line"></span><br><span class="line">// Declaration</span><br><span class="line">main.Example(slice []string, str string, i int)</span><br><span class="line"></span><br><span class="line">// Stack trace</span><br><span class="line">main.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)</span><br></pre></td></tr></table></figure><p><strong>清单6</strong>显示了堆栈跟踪中的第四个和第五个值如何与string参数匹配。 第四个值表示指向底层字节数组的指针，第五个值表示字符串的长度为5。字符串</p><p>“hello”</p><p>需要5个字节。 这两个值表示字符串标题的每个值，即Example函数的第二个参数。</p><p><strong>Figure 2</strong></p><p><img src="/2018/07/18/Go里面的堆栈跟踪/Figure2.png" alt=""></p><p>第三个参数是一个整数，它是一个单值：</p><h3 id="清单7"><a href="#清单7" class="headerlink" title="清单7"></a>清单7</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// Integer parameter value</span><br><span class="line">10</span><br><span class="line"></span><br><span class="line">// Integer value</span><br><span class="line">Base 16: 0xa</span><br><span class="line"></span><br><span class="line">// Declaration</span><br><span class="line">main.Example(slice []string, str string, i int)</span><br><span class="line"></span><br><span class="line">// Stack trace</span><br><span class="line">main.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)</span><br></pre></td></tr></table></figure><p><strong>清单7</strong>显示了堆栈跟踪中的最后一个值如何与int类型的参数匹配。 trace中的最后一个值是十六进制数0xa，它的值是10.与该参数传递的值相同。 该值代表Example函数中的第三个参数。</p><p><strong>Figure 3</strong></p><p><img src="/2018/07/18/Go里面的堆栈跟踪/Figure3.png" alt=""></p><h2 id="Methods-方法的情况"><a href="#Methods-方法的情况" class="headerlink" title="Methods(方法的情况)"></a>Methods(方法的情况)</h2><p>如果我们将Example作为结构体的方法会怎么样呢?</p><h3 id="清单8"><a href="#清单8" class="headerlink" title="清单8"></a>清单8</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">01</span> <span class="keyword">package</span> main</span><br><span class="line"><span class="number">02</span></span><br><span class="line"><span class="number">03</span> <span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="number">04</span></span><br><span class="line"><span class="number">05</span> <span class="keyword">type</span> trace <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="number">06</span></span><br><span class="line"><span class="number">07</span> <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="number">08</span>     slice := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"><span class="number">09</span></span><br><span class="line"><span class="number">10</span>     <span class="keyword">var</span> t trace</span><br><span class="line"><span class="number">11</span>     t.Example(slice, <span class="string">"hello"</span>, <span class="number">10</span>)</span><br><span class="line"><span class="number">12</span> &#125;</span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">14</span> <span class="function"><span class="keyword">func</span> <span class="params">(t *trace)</span> <span class="title">Example</span><span class="params">(slice []<span class="keyword">string</span>, str <span class="keyword">string</span>, i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="number">15</span>     fmt.Printf(<span class="string">"Receiver Address: %p\n"</span>, t)</span><br><span class="line"><span class="number">16</span>     <span class="built_in">panic</span>(<span class="string">"Want stack trace"</span>)</span><br><span class="line"><span class="number">17</span> &#125;</span><br></pre></td></tr></table></figure><p><strong>清单8</strong>通过在第05行声明一个名为trace的新类型，并更改程序，将Example申明为trace类型的方法。通过使用trace类型的指针接收器重新声明该函数来完成转换。 然后在第10行，将变量t申明为trace类型，并且在第11行进行方法调用。</p><p>由于该方法是使用指针声明的，因此Go将获取变量t的地址来支持接收者类型，即使方法调用是使用值来完成的。 这次运行程序时，堆栈跟踪有点不同：</p><h3 id="清单9"><a href="#清单9" class="headerlink" title="清单9"></a>清单9</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Receiver Address: 0x1553a8</span><br><span class="line">panic: Want stack trace</span><br><span class="line"></span><br><span class="line">01 goroutine 1 [running]:</span><br><span class="line">02 main.(*trace).Example(0x1553a8, 0x2081b7f50, 0x2, 0x4, 0xdc1d0, 0x5, 0xa)</span><br><span class="line">           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</span><br><span class="line">           temp/main.go:16 +0x116</span><br><span class="line"></span><br><span class="line">03 main.main()</span><br><span class="line">           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</span><br><span class="line">           temp/main.go:11 +0xae</span><br></pre></td></tr></table></figure><p>在<strong>清单9</strong>中你应该注意的第一件事是第02行的堆栈跟踪清楚的显示这是一个使用指针接收器调用的方法。现在函数的名称显示的样子是： 在package名字和方法名之间多出了”*trace”字样 。 需要注意的第二件事是参数列表的第1个参数标明了结构体(t)地址。 我们从堆栈跟踪中看到了这个实现细节。</p><h2 id="Packing（打包）"><a href="#Packing（打包）" class="headerlink" title="Packing（打包）"></a>Packing（打包）</h2><p>如果有多个参数可以填充到一个single word, 那么堆栈跟踪中参数的值将打包在一起 ：</p><h3 id="清单10"><a href="#清单10" class="headerlink" title="清单10"></a>清单10</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">01</span> <span class="keyword">package</span> main</span><br><span class="line"><span class="number">02</span></span><br><span class="line"><span class="number">03</span> <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="number">04</span>     Example(<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="number">25</span>)</span><br><span class="line"><span class="number">05</span> &#125;</span><br><span class="line"><span class="number">06</span> </span><br><span class="line"><span class="number">07</span> <span class="function"><span class="keyword">func</span> <span class="title">Example</span><span class="params">(b1, b2, b3 <span class="keyword">bool</span>, i <span class="keyword">uint8</span>)</span></span> &#123;</span><br><span class="line"><span class="number">08</span>     <span class="built_in">panic</span>(<span class="string">"Want stack trace"</span>)</span><br><span class="line"><span class="number">09</span> &#125;</span><br></pre></td></tr></table></figure><p>这个例子修改Example函数改为接收4个参数：3个bool型和1个八位无符号整型。bool值也是用8个bit表示，所以在32位和64位架构下，4个参数可以合并为一个single word。 当程序运行时，它会产生一个有趣的堆栈跟踪 :</p><h3 id="清单11"><a href="#清单11" class="headerlink" title="清单11"></a>清单11</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">01 goroutine 1 [running]:</span><br><span class="line">02 main.Example(0x19010001)</span><br><span class="line">           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</span><br><span class="line">           temp/main.go:8 +0x64</span><br><span class="line">03 main.main()</span><br><span class="line">           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</span><br><span class="line">           temp/main.go:4 +0x32</span><br></pre></td></tr></table></figure><p>对于对Example的调用，堆栈跟踪中没有四个值，而是有一个值。所有四个单独的8位值都拼凑成一个单词：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// Parameter values</span><br><span class="line">true, false, true, 25</span><br><span class="line"></span><br><span class="line">// Word value</span><br><span class="line">Bits    Binary      Hex   Value</span><br><span class="line">00-07   0000 0001   01    true</span><br><span class="line">08-15   0000 0000   00    false</span><br><span class="line">16-23   0000 0001   01    true</span><br><span class="line">24-31   0001 1001   19    25</span><br><span class="line"></span><br><span class="line">// Declaration</span><br><span class="line">main.Example(b1, b2, b3 bool, i uint8)</span><br><span class="line"></span><br><span class="line">// Stack trace</span><br><span class="line">main.Example(0x19010001)</span><br></pre></td></tr></table></figure><p><strong>清单12</strong>显示了堆栈跟踪中的值是如何与传入的所有四个参数值匹配.true的值是一个8位值，用1表示，false的值是0.二进制25的值是11001，转换为十六进制是19。 现在，我们看到堆栈信息中包括十六进制值，需要知道这些值是如何传递的。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>Go运行时提供了大量信息来帮助我们调试程序。在这篇文章中，我们专注于堆栈跟踪。分析在整个调用堆栈中传递给每个函数的值的能力是很有用的。它不止一次帮助我很快识别我的错误。既然您已经知道如何读取堆栈跟踪，那么希望您可以在下次发生堆栈跟踪时利用这些知识。</p>]]></content>
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Consul安装部署</title>
      <link href="/2018/07/13/Consul%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
      <url>/2018/07/13/Consul%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<h1 id="什么是Consul"><a href="#什么是Consul" class="headerlink" title="什么是Consul"></a>什么是Consul</h1><ul><li>是一个服务管理软件。</li><li>支持多数据中心下，分布式高可用的，服务发现和配置共享。</li><li>consul支持健康检查，允许存储键值对。</li><li>一致性协议采用 Raft 算法,用来保证服务的高可用.</li><li>成员管理和消息广播 采用GOSSIP协议，支持ACL访问控制。</li></ul><p><strong>ACL技术</strong></p><p>在路由器中被广泛采用，它是一种基于包过滤的流控制技术。控制列表通过把源地址、目的地址及端口号作为数据包检查的基本元素，并可以规定符合条件的数据包是否允许通过。</p><p><strong>gossip就是p2p协议。</strong></p><p>他主要要做的事情是，去中心化。<br>这个协议就是模拟人类中传播谣言的行为而来。首先要传播谣言就要有种子节点。种子节点每秒都会随机向其他节点发送自己所拥有的节点列表，以及需要传播的消息。任何新加入的节点，就在这种传播方式下很快地被全网所知道。</p><p><strong>什么是强一致性协议？</strong></p><p>按照某一顺序串行执行存储对象读写操作， 更新存储对象之后， 后续访问总是读到最新值。 假如进程A先更新了存储对象，存储系统保证后续A,B,C进程的读取操作都将返回最新值。强一致性模型有几种常见实现方法， 主从同步复制， 以及quorum复制等。</p><p>Consul is opinionated in its usage while Serf is a more flexible and general purpose tool. In CAP terms, Consul uses a CP architecture, favoring consistency over availability.</p><p><a href="https://www.consul.io/intro/vs/serf.html" target="_blank" rel="noopener">官方文档地址</a></p><p>说明consul是cp的，并不是网上有些文章说的是ca模式</p><p>下面表格对consul 、zookeeper、 etcd、 euerka做了对比</p><table><thead><tr><th>Feature</th><th>Consul</th><th>zookeeper</th><th>etcd</th><th>euerka</th></tr></thead><tbody><tr><td>服务健康检查</td><td>服务状态，内存，硬盘等</td><td>(弱)长连接，keepalive</td><td>连接心跳</td><td>可配支持</td></tr><tr><td>多数据中心</td><td>支持</td><td>—</td><td>—</td><td>—</td></tr><tr><td>kv存储服务</td><td>支持</td><td>支持</td><td>支持</td><td>—</td></tr><tr><td>一致性</td><td>raft</td><td>paxos</td><td>raft</td><td>—</td></tr><tr><td>cap</td><td>cp</td><td>cp</td><td>cp</td><td>ap</td></tr><tr><td>使用接口(多语言能力)</td><td>支持http和dns</td><td>客户端</td><td>http/grpc</td><td>http（sidecar）</td></tr><tr><td>watch支持</td><td>全量/支持long polling</td><td>支持</td><td>支持 long polling</td><td>支持 long polling/大部分增量</td></tr><tr><td>自身监控</td><td>metrics</td><td>—</td><td>metrics</td><td>metrics</td></tr><tr><td>安全</td><td>acl /https</td><td>acl</td><td>https支持（弱）</td><td>—</td></tr><tr><td>spring cloud集成</td><td>已支持</td><td>已支持</td><td>已支持</td><td>已支持</td></tr></tbody></table><h1 id="Consul安装"><a href="#Consul安装" class="headerlink" title="Consul安装"></a>Consul安装</h1><p>安装Consul,找到适合你系统的包下载他.Consul打包为一个’Zip’文件.<a href="https://www.consul.io/downloads.html" target="_blank" rel="noopener">前往下载</a></p><p>下载后解开压缩包.拷贝Consul到你的PATH路径中,在Unix系统中<code>/bin</code>和<code>/usr/local/bin</code>是通常的安装目录.根据你是想为单个用户安装还是给整个系统安装来选择.在Windows系统中有可以安装到<code>%PATH%</code>的路径中.</p><h2 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h2><p>完成安装后,通过打开一个新终端窗口检查<code>consul</code>安装是否成功.通过执行 <code>consul</code>你应该看到类似下面的输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@iZbp14ouog5ocoeakj39q1Z ~]# consul</span><br><span class="line">Usage: consul [--version] [--help] &lt;command&gt; [&lt;args&gt;]</span><br><span class="line"></span><br><span class="line">Available commands are:</span><br><span class="line">    agent          Runs a Consul agent</span><br><span class="line">    catalog        Interact with the catalog</span><br><span class="line">    connect        Interact with Consul Connect</span><br><span class="line">    event          Fire a new event</span><br><span class="line">    exec           Executes a command on Consul nodes</span><br><span class="line">    force-leave    Forces a member of the cluster to enter the &quot;left&quot; state</span><br><span class="line">    info           Provides debugging information for operators.</span><br><span class="line">    intention      Interact with Connect service intentions</span><br><span class="line">    join           Tell Consul agent to join cluster</span><br><span class="line">    keygen         Generates a new encryption key</span><br><span class="line">    keyring        Manages gossip layer encryption keys</span><br><span class="line">    kv             Interact with the key-value store</span><br><span class="line">    leave          Gracefully leaves the Consul cluster and shuts down</span><br><span class="line">    lock           Execute a command holding a lock</span><br><span class="line">    maint          Controls node or service maintenance mode</span><br><span class="line">    members        Lists the members of a Consul cluster</span><br><span class="line">    monitor        Stream logs from a Consul agent</span><br><span class="line">    operator       Provides cluster-level tools for Consul operators</span><br><span class="line">    reload         Triggers the agent to reload configuration files</span><br><span class="line">    rtt            Estimates network round trip time between nodes</span><br><span class="line">    snapshot       Saves, restores and inspects snapshots of Consul server state</span><br><span class="line">    validate       Validate config files/directories</span><br><span class="line">    version        Prints the Consul version</span><br><span class="line">    watch          Watch for changes in Consul</span><br></pre></td></tr></table></figure><p>如果你得到一个<code>consul not be found</code>的错误,你的<code>PATH</code>可能没有正确设置.请返回检查你的<code>consul</code>的安装路径是否包含在<code>PATH</code>中.</p><h2 id="consule参数的介绍"><a href="#consule参数的介绍" class="headerlink" title="consule参数的介绍"></a>consule参数的介绍</h2><h3 id="consul-术语"><a href="#consul-术语" class="headerlink" title="consul 术语"></a>consul 术语</h3><p>首先介绍下在 consul 中会经常见到的术语：</p><ul><li><code>node</code>：节点，需要 consul 注册发现或配置管理的服务器。在一个集群中必须是唯一的，默认是该节点的主机名</li><li><code>agent</code>：consul 中的核心程序，它将以守护进程的方式在各个节点运行，有 client 和 server 启动模式。每个 agent 维护一套服务和注册发现以及健康信息。</li><li><code>client</code>：agent 以 client 模式启动的节点。在该模式下，该节点会采集相关信息，通过 RPC 的方式向 server 发送。这个地址提供HTTP、DNS、RPC等服务，默认是127.0.0.1所以不对外提供服务，如果你要对外提供服务改成0.0.0.0</li><li><code>server</code>：agent 以 server 模式启动的节点。一个数据中心中至少包含 1 个 server 节点。不过官方建议使用 3 或 5 个 server 节点组建成集群，以保证高可用且不失效率。server 节点参与 Raft、维护会员信息、注册服务、健康检查等功能。</li><li><code>datacenter</code>：数据中心，私有的，低延迟的和高带宽的网络环境。一般的多个数据中心之间的数据是不会被复制的，但可用过 <a href="https://www.consul.io/docs/guides/acl.html#outages-and-acl-replication" target="_blank" rel="noopener">ACL replication</a> 或使用外部工具 <a href="https://github.com/hashicorp/consul-replicate" target="_blank" rel="noopener">onsul-replicate</a>。</li><li><code>Consensus</code>，<a href="https://www.consul.io/docs/internals/consensus.html" target="_blank" rel="noopener">共识协议</a>，使用它来协商选出 leader。</li><li><code>Gossip</code>：consul 是建立在 <a href="https://www.serf.io/" target="_blank" rel="noopener">Serf</a>，它提供完整的 <a href="https://www.consul.io/docs/internals/gossip.html" target="_blank" rel="noopener">gossip protocol</a>，<a href="https://en.wikipedia.org/wiki/Gossip_protocol" target="_blank" rel="noopener">维基百科</a>。</li><li><code>LAN Gossip</code>，Lan gossip 池，包含位于同一局域网或数据中心上的节点。</li><li><code>WAN Gossip</code>，只包含 server 的 WAN Gossip 池，这些服务器主要位于不同的数据中心，通常通过互联网或广域网进行通信。</li><li><code>members</code>：成员，对 consul 成员的称呼。提供会员资格，故障检测和事件广播。</li><li><code>-bootstrap-expect</code> ：在一个datacenter中期望提供的server节点数目，当该值提供的时候，consul一直等到达到指定sever数目的时候才会引导整个集群，该标记不能和bootstrap共用</li><li><code>-bind</code>：该地址用来在集群内部的通讯，集群内的所有节点到地址都必须是可达的，默认是0.0.0.0</li><li><code>-ui-dir</code>： 提供存放web ui资源的路径，该目录必须是可读的，<strong>1.2中是直接使用-ui参数就可以</strong></li><li><code>-rejoin</code>：使consul忽略先前的离开，在再次启动后仍旧尝试加入集群中。</li><li><code>-config-dir</code>：：配置文件目录，里面所有以.json结尾的文件都会被加载</li></ul><h3 id="consul-端口说明"><a href="#consul-端口说明" class="headerlink" title="consul 端口说明"></a>consul 端口说明</h3><p>consul 内使用了很多端口，理解这些端口的用处对你理解 consul 架构很有帮助：</p><table><thead><tr><th>端口</th><th>说明</th></tr></thead><tbody><tr><td>TCP/8300</td><td>8300 端口用于服务器节点。客户端通过该端口 RPC 协议调用服务端节点。服务器节点之间相互调用</td></tr><tr><td>TCP/UDP/8301</td><td>8301 端口用于单个数据中心所有节点之间的互相通信，即对 LAN 池信息的同步。它使得整个数据中心能够自动发现服务器地址，分布式检测节点故障，事件广播（如领导选举事件）。</td></tr><tr><td>TCP/UDP/8302</td><td>8302 端口用于单个或多个数据中心之间的服务器节点的信息同步，即对 WAN 池信息的同步。它针对互联网的高延迟进行了优化，能够实现跨数据中心请求。</td></tr><tr><td>8500</td><td>8500 端口基于 HTTP 协议，用于 API 接口或 WEB UI 访问。</td></tr><tr><td>8600</td><td>8600 端口作为 DNS 服务器，它使得我们可以通过节点名查询节点信息。</td></tr></tbody></table><h1 id="Consul运行"><a href="#Consul运行" class="headerlink" title="Consul运行"></a>Consul运行</h1><h2 id="开发模式运行consul"><a href="#开发模式运行consul" class="headerlink" title="开发模式运行consul"></a>开发模式运行consul</h2><p><img src="/2018/07/13/Consul安装部署/consul_dev.png" alt=""></p><ul><li>查看集群成员</li></ul><p>新开一个终端窗口运行<code>consul members</code>, 你可以看到Consul集群的成员.</p><p><img src="/2018/07/13/Consul安装部署/member_dev.png" alt=""></p><ul><li><p>浏览器查看webUI界面</p><p>浏览器中输出serverip:8500,会出现consul的管理webUI<br><img src="/home/zhaohq/blog/hexo/source/_posts/image/Consul安装部署/ui_dev.png" alt=""></p></li></ul><h2 id="生产环境运行consul"><a href="#生产环境运行consul" class="headerlink" title="生产环境运行consul"></a>生产环境运行consul</h2><h3 id="启动三台server服务器"><a href="#启动三台server服务器" class="headerlink" title="启动三台server服务器"></a>启动三台server服务器</h3><p> agent可以运行为server或client模式.每个数据中心至少必须拥有一台server . 建议在一个集群中有3或者5个server.部署单一的server,在出现失败时会不可避免的造成数据丢失.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">其他的agent运行为client模式.一个client是一个非常轻量级的进程.用于注册服务,运行健康检查和转发对server的查询.agent必须在集群中的每个主机上运行.</span><br></pre></td></tr></table></figure><p>这里启动三个agent server，三台机器的地址分别是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10.174.96.52    s1 </span><br><span class="line">10.173.224.146  s2</span><br><span class="line">10.173.224.74   s3</span><br></pre></td></tr></table></figure><p>必须有一个初始节点，且手动指定为leader，然后开启其它server节点，让它们加入集群。 最后初始节点下线，重新加入集群，参与选举。</p><p>我们手动指定10.174.96.52为leader,这种方式，<code>-bootstrap-expect 3</code> 期待三个 server 加入才能完成 consul 的引导。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consul agent -server -bootstrap-expect 3 -data-dir /tmp/consul -node=s1 -bind=10.174.96.52 -ui -client 0.0.0.0</span><br></pre></td></tr></table></figure><p>继续添加 server2、server3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">consul agent -server  -data-dir /tmp/consul -node=s2 -bind=10.173.224.146 -ui -join 10.174.96.52</span><br><span class="line"></span><br><span class="line">consul agent -server  -data-dir /tmp/consul -node=s3 -bind=10.173.224.74 -ui  -join 10.174.96.52</span><br></pre></td></tr></table></figure><ul><li><code>-data-dir</code>：提供一个目录用来存放agent的状态，所有的agent允许都需要该目录，该目录必须是稳定的，系统重启后都继续存在</li><li><code>-join</code>：将agent加入到集群</li></ul><p><strong>此时10.174.96.52显示的信息是，当146主机和74主机加入到集群后，s1就被选举为leader</strong><br><img src="/2018/07/13/Consul安装部署/leader_52.png" alt=""></p><p><strong>10.173.224.146加入到集群中后显示的信息</strong>：<br><img src="/2018/07/13/Consul安装部署/candidate_146.png" alt=""></p><p><strong>查看webUI</strong><br><img src="/2018/07/13/Consul安装部署/ui_1.png" alt=""></p><p>查看三个server的名称<br><img src="/2018/07/13/Consul安装部署/ui_2.png" alt=""></p><h3 id="将新服务服务注册到consul"><a href="#将新服务服务注册到consul" class="headerlink" title="将新服务服务注册到consul"></a>将新服务服务注册到consul</h3><p>consul 支持两种服务发现的方式：</p><ol><li>通过 HTTP API 方式，这种方式需要额外编程，适用于不安装 consul agent 的情况，<a href="https://www.consul.io/api/catalog.html" target="_blank" rel="noopener">文档地址</a>。</li><li>通过 consul agent 配置的方式，agent 启动的时候会读取一个配置文件目录，通过配置进行服务的发现，<a href="https://www.consul.io/docs/agent/services.html" target="_blank" rel="noopener">文档地址</a>。</li></ol><p>这里介绍第二种方式，通过配置文件来进行服务发现。这里就需要用到我们的 client 服务器啦。</p><p>首先，用 Go 写一个简单的 HTTP 服务器：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleExample</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    w.Write([]<span class="keyword">byte</span>(<span class="string">"hello man"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleHealth</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"health check!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">"/"</span>, HandleExample)</span><br><span class="line">    http.HandleFunc(<span class="string">"/health"</span>, HandleHealth)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"listen on :9000"</span>)</span><br><span class="line">    http.ListenAndServe(<span class="string">":9000"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编辑一个配置文件 <code>/etc/consul.d/web.json</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"service"</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"web"</span>,</span><br><span class="line">        <span class="attr">"tags"</span>: [<span class="string">"primary"</span>],</span><br><span class="line">        <span class="attr">"address"</span>: <span class="string">"10.174.96.52"</span>,</span><br><span class="line">        <span class="attr">"port"</span>: <span class="number">9000</span>,</span><br><span class="line">        <span class="attr">"checks"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"http"</span>: <span class="string">"http://localhost:9000/health"</span>,</span><br><span class="line">            <span class="attr">"interval"</span>: <span class="string">"10s"</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/07/13/Consul安装部署/ui_3.png" alt=""></p><ul><li><code>-config-dir</code>：配置文件目录，里面所有以.json结尾的文件都会被加载</li></ul><h3 id="配置共享"><a href="#配置共享" class="headerlink" title="配置共享"></a>配置共享</h3><p>由与有了 agent client 和 server 模式的提供，配置共享也变得异常的简单。</p><p>在任意节点更新配置数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ consul kv put redis/config 192.168.99.133</span><br><span class="line">Success! Data written to: redis/config</span><br></pre></td></tr></table></figure><p>整个集群均会自动更新，在 s1 节点查看数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ consul kv get redis/config</span><br><span class="line">192.168.99.133</span><br></pre></td></tr></table></figure><h2 id="断开连接"><a href="#断开连接" class="headerlink" title="断开连接"></a>断开连接</h2><p>你可以使用<code>Ctrl-C</code> 优雅的关闭Agent. 中断Agent之后你可以看到他离开了集群并关闭.</p><p>在退出中,Consul提醒其他集群成员,这个节点离开了.如果你强行杀掉进程.集群的其他成员应该能检测到这个节点失效了.当一个成员离开,他的服务和检测也会从目录中移除.当一个成员失效了,他的健康状况被简单的标记为危险,但是不会从目录中移除.Consul会自动尝试对失效的节点进行重连.允许他从某些网络条件下恢复过来.离开的节点则不会再继续联系.</p><p>此外,如果一个agent作为一个服务器,一个优雅的离开是很重要的,可以避免引起潜在的可用性故障影响达成<a href="https://www.consul.io/docs/internals/consensus.html" target="_blank" rel="noopener">一致性协议</a>.</p><p>查看<a href="https://www.consul.io/docs/internals/consensus.html" target="_blank" rel="noopener">这里</a>了解添加和移除server.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一个consul agent就是一个独立的程序。一个长时间运行的守护进程，运行在concul集群中的每个节点上。</p><p>启动一个consul agent ，只是启动一个孤立的node，如果想知道集群中的其他节点，应该将consul agent加入到集群中去 cluster。</p><p><strong>agent有两种模式：server与client。</strong></p><ul><li>server模式包含了一致性的工作：保证一致性和可用性（在部分失败的情况下），响应RPC，同步数据到其他节点代理。</li><li>client 模式用于与server进行通信，转发RPC到服务的代理agent，它仅保存自身的少量一些状态，是非常轻量化的东西。本身是相对无状态的。</li></ul><p>agent除去设置server/client模式、数据路径之外，还最好设置node的名称和ip。</p><p><strong>一张经典的consul架构图片：</strong></p><p><img src="/2018/07/13/Consul安装部署/consul架构图.png" alt=""></p><ul><li>LAN gossip pool包含了同一局域网内所有节点，包括server与client。这基本上是位于同一个数据中心DC。</li><li>WAN gossip pool一般仅包含server，将跨越多个DC数据中心，通过互联网或广域网进行通信。</li><li>Leader服务器负责所有的RPC请求，查询并相应。所以其他服务器收到client的RPC请求时，会转发到leader服务器。</li></ul><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://deepzz.com/post/the-consul-of-discovery-and-configure-services.html" target="_blank" rel="noopener">consul 支持多数据中心的服务发现与配置共享工具</a></p><p><a href="https://blog.csdn.net/viewcode/article/details/45915179" target="_blank" rel="noopener">consul入门</a></p><p><a href="http://www.liangxiansen.cn/2017/04/06/consul" target="_blank" rel="noopener">Consul使用手册</a></p>]]></content>
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Consul </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微服务初探</title>
      <link href="/2018/07/12/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%88%9D%E6%8E%A2/"/>
      <url>/2018/07/12/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%88%9D%E6%8E%A2/</url>
      <content type="html"><![CDATA[<h1 id="初识为服务"><a href="#初识为服务" class="headerlink" title="初识为服务"></a>初识为服务</h1><h2 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h2><p>使用一套小服务来开发单个应用的方式，每个服务运行在<strong>独立的进程</strong>里。一般采用<strong>轻量级的通讯</strong>机制互联，并且他们可以通过<strong>自动化</strong>的方式部署。</p><h2 id="微服务特征"><a href="#微服务特征" class="headerlink" title="微服务特征"></a>微服务特征</h2><p><strong>单一职责</strong>(只把紧密相关的业务放在一起，无关的业务独立出来，比如订单和支付作为一个服务，登录注册作为一个服务，和其他服务不紧密的比如邮件服务，短信服务可以作为一个服务)</p><p><strong>轻量级的通信</strong>：微服务之间的访问和通信 (平台无关和语言无关，http就是轻量级的通信协议)</p><p><strong>隔离线</strong>：每个微服务运行在自己的进程中</p><p><strong>有自己的数据</strong>：微服务倾向都有自己的数据存储系统，这样可以降低数据结构的复杂度</p><p><strong>技术多样性</strong>：微服务可以由开发人员选择最适合的技术，只要提供应有的API就可以了</p><h2 id="微服务诞生背景"><a href="#微服务诞生背景" class="headerlink" title="微服务诞生背景"></a>微服务诞生背景</h2><ol><li>互联网行业的快速发展</li><li>敏捷开发，精益方法深入人心(说白了就是频繁的修改测试上线）</li><li>容器技术的成熟</li></ol><h2 id="微服务的优势"><a href="#微服务的优势" class="headerlink" title="微服务的优势"></a>微服务的优势</h2><p><strong>独立性</strong>:微服务从构建，部署，扩容，缩容，容错，数据库都是单独管理的，所以每个服务之间都是相互独立的</p><p><strong>敏捷性</strong>：对使用者来说，微服务暴露的接口相对简单，因为功能单一，并且有清晰的api,当有新需求时，也可以快速定位到是在哪个微服务中开发</p><p><strong>技术栈灵活</strong>：理论上每个微服务都可以有自己独立的技术栈，不会受到其他微服务的影响</p><p><strong>高效团队</strong>：微服务开发的人员不多，可以几个人开个小会就把需求定下来</p><h2 id="微服务的不足"><a href="#微服务的不足" class="headerlink" title="微服务的不足"></a>微服务的不足</h2><p><strong>额外的工作</strong>：服务的拆分，要把我们的服务拆解成微服务。tdd领域驱动设计</p><p><strong>数据一致性</strong>：单体架构只有一个数据库，可以使用事务来实现多表的级联的修改和删除很容易达到数据的一致性，微服务都有自己的数据库，拆分微服务的时候要尽量保证对数据库的连表操作，尽量在同一个微服务里面。但是很难保证意外的情况</p><p><strong>沟通成本</strong>：微服务的api的改变带来的沟通成本，因为可能需要改变的地方并不仅仅只是自己的服务，还涉及到其他服务，则这个时候推动项目的前进的沟通成本很高</p><h1 id="微服务架构引入的问题和解决方案"><a href="#微服务架构引入的问题和解决方案" class="headerlink" title="微服务架构引入的问题和解决方案"></a>微服务架构引入的问题和解决方案</h1><h2 id="微服务间如何通信？"><a href="#微服务间如何通信？" class="headerlink" title="微服务间如何通信？"></a>微服务间如何通信？</h2><h3 id="从通讯模式角度考虑"><a href="#从通讯模式角度考虑" class="headerlink" title="从通讯模式角度考虑"></a>从通讯模式角度考虑</h3><ul><li>一对一还是一对多？<br>同步还是异步？</li></ul><table><thead><tr><th></th><th>一对一</th><th>一对多</th></tr></thead><tbody><tr><td>同步</td><td>请求响应模式，最常见</td><td>———–（没有这样的场景）</td></tr><tr><td>异步</td><td>通知(不需要响应)/请求异步响应(不需要立即响应)</td><td>发布订阅/发布异步响应</td></tr></tbody></table><h3 id="从通讯协议角度考虑"><a href="#从通讯协议角度考虑" class="headerlink" title="从通讯协议角度考虑"></a>从通讯协议角度考虑</h3><p> REST API </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RPC : dubbo ,grpc, thrift, motan</span><br></pre></td></tr></table></figure><p> MQ : 消息队列，发布订阅的模式 </p><h3 id="如何选择RPC框架"><a href="#如何选择RPC框架" class="headerlink" title="如何选择RPC框架"></a>如何选择RPC框架</h3><p>I/O,线程调度模型:</p><p> 是同步的IO还是非阻塞的异步IO。是长连接还是短连接。 )</p><p> 是单线程还是多线程，线程的调度算法是怎么样的</p><p>序列化的方式——-&gt;通信的效率</p><p> 可读的</p><p> 二进制</p><p>多语言支持：是否都是一个语言开发</p><p>服务治理：服务发现和服务的监控</p><h2 id="服务发现、部署、更新"><a href="#服务发现、部署、更新" class="headerlink" title="服务发现、部署、更新"></a>服务发现、部署、更新</h2><p>不管微服务还是传统服务，绝大多数对外提供访问的方式是ip+port的方式.</p><p><strong>传统服务的 “服务发现”</strong></p><p>client—&gt;dns服务器—&gt;nginx轮训对应的ip和端口—-&gt;服务器</p><p>这也不算是服务发现，每次新增服务的时候，需要重新配置。</p><p><strong>微服务的服务发现</strong></p><ol><li>客户端的发现</li></ol><p><img src="/2018/07/12/微服务初探/客户端服务发现.png" alt=""></p><p>最下面有一个注册中心，当微服务启动之后，都会把自己所暴露的ip和port告诉给注册中心，然后客户端通过查询注册中心所注册的服务来得知微服务提供者的ip和port列表，然后通过本地的一些负载均衡等策略来实现对微服务的无差别访问，如果出现一些调用失败的情况，客户端也有自己的重试的规则。</p><p>dubbo和motan就是这种模式</p><p>服务端的发现</p><p><img src="/2018/07/12/微服务初探/服务端服务发现.png" alt=""></p><p>微服务还是同样的将自己的ip和port注册到注册中心，但是客户端不访问注册中心了，他不需通过注册中心指导微服务的列表，而是通过一个固有的ip去访问一个具有服务发现和负载均衡的服务，再由他将请求转发给后端的具体服务，并且将应答返回给客户端，这个服务在中间起到一个类似代理人的作用，他会从注册中心获取到具体的微服务列表，然后维护到自己的内部，然后当客户端请求一个服务的时候，他会知道客户端应该请求的是这个服务对应的哪些实例在运行，然后通过负载均衡算法去选择一个后端。</p><h2 id="服务编排"><a href="#服务编排" class="headerlink" title="服务编排"></a>服务编排</h2><p>服务编排包括，服务发现，服务更新和服务的扩缩融</p><p>流行的服务编排工具：</p><p>Mesos Docker Swarm kubernetes</p>]]></content>
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redis集群安装</title>
      <link href="/2017/12/29/redis%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/"/>
      <url>/2017/12/29/redis%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h1 id="redis-Cluster-集群安装"><a href="#redis-Cluster-集群安装" class="headerlink" title="redis Cluster 集群安装"></a>redis Cluster 集群安装</h1><h2 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h2><p>测试部署方式，一台测试机多实例启动部署。</p><p>安装redis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://download.redis.io/releases/redis-3.2.8.tar.gz</span><br><span class="line">$ tar xzf redis-3.2.8.tar.gz</span><br><span class="line">$ cd redis-3.2.8</span><br><span class="line">$ yum groupinstall -y &quot;Development Tools&quot;</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>修改配置文件 redis.conf</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#redis.conf默认配置</span></span><br><span class="line"><span class="string">daemonize</span> <span class="literal">yes</span>   <span class="comment">#后台运行开启</span></span><br><span class="line"><span class="string">pidfile</span> <span class="string">/var/run/redis/redis.pid</span>  <span class="comment">#多实例情况下需修改，指定pid文件的路径 通过绝对路径指明文件存放的位置 自行创建相关的文件目录 例如redis_6380.pid</span></span><br><span class="line"><span class="string">port</span> <span class="number">6379</span>　　　　　　　　<span class="comment">#多实例情况下需要修改,修改端口号 例如6380</span></span><br><span class="line"><span class="string">tcp-backlog</span> <span class="number">511</span></span><br><span class="line"><span class="string">bind</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>　　　　　　</span><br><span class="line"><span class="string">timeout</span> <span class="number">0</span></span><br><span class="line"><span class="string">tcp-keepalive</span> <span class="number">0</span></span><br><span class="line"><span class="string">loglevel</span> <span class="string">notice</span></span><br><span class="line"><span class="string">logfile</span> <span class="string">/var/log/redis/redis.log</span>　　　　　　<span class="comment">#多实例情况下需要修改，例如6380.log</span></span><br><span class="line"><span class="string">databases</span> <span class="number">16</span></span><br><span class="line"><span class="string">save</span> <span class="number">900</span> <span class="number">1</span></span><br><span class="line"><span class="string">save</span> <span class="number">300</span> <span class="number">10</span></span><br><span class="line"><span class="string">save</span> <span class="number">60</span> <span class="number">10000</span></span><br><span class="line"><span class="string">stop-writes-on-bgsave-error</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">rdbcompression</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">rdbchecksum</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">dbfilename</span> <span class="string">dump.rdb</span>　　<span class="comment">#多实例情况下需要修改，修改dump日志文件路径 果不修改dump文件那么每次的日志文件都是公用的 例如dump.6380.rdb</span></span><br><span class="line"><span class="string">slave-serve-stale-data</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">slave-read-only</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">repl-diskless-sync</span> <span class="literal">no</span></span><br><span class="line"><span class="string">repl-diskless-sync-delay</span> <span class="number">5</span></span><br><span class="line"><span class="string">repl-disable-tcp-nodelay</span> <span class="literal">no</span></span><br><span class="line"><span class="string">slave-priority</span> <span class="number">100</span></span><br><span class="line"><span class="string">appendonly</span> <span class="literal">yes</span>  <span class="comment">#启用二进制日志</span></span><br><span class="line"><span class="string">appendfilename</span> <span class="string">"appendonly.aof"</span>　　<span class="comment">#多实例情况下需要修改,例如 appendonly_6380.aof</span></span><br><span class="line"><span class="string">appendfsync</span> <span class="string">everysec</span></span><br><span class="line"><span class="literal">no</span><span class="bullet">-appendfsync-on-rewrite</span> <span class="literal">no</span></span><br><span class="line"><span class="string">auto-aof-rewrite-percentage</span> <span class="number">100</span></span><br><span class="line"><span class="string">auto-aof-rewrite-min-size</span> <span class="number">64</span><span class="string">mb</span></span><br><span class="line"><span class="string">aof-load-truncated</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">lua-time-limit</span> <span class="number">5000</span></span><br><span class="line"><span class="string">slowlog-log-slower-than</span> <span class="number">10000</span></span><br><span class="line"><span class="string">slowlog-max-len</span> <span class="number">128</span></span><br><span class="line"><span class="string">latency-monitor-threshold</span> <span class="number">0</span></span><br><span class="line"><span class="string">notify-keyspace-events</span> <span class="string">""</span></span><br><span class="line"><span class="string">hash-max-ziplist-entries</span> <span class="number">512</span></span><br><span class="line"><span class="string">hash-max-ziplist-value</span> <span class="number">64</span></span><br><span class="line"><span class="string">list-max-ziplist-entries</span> <span class="number">512</span></span><br><span class="line"><span class="string">list-max-ziplist-value</span> <span class="number">64</span></span><br><span class="line"><span class="string">set-max-intset-entries</span> <span class="number">512</span></span><br><span class="line"><span class="string">zset-max-ziplist-entries</span> <span class="number">128</span></span><br><span class="line"><span class="string">zset-max-ziplist-value</span> <span class="number">64</span></span><br><span class="line"><span class="string">hll-sparse-max-bytes</span> <span class="number">3000</span></span><br><span class="line"><span class="string">activerehashing</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">client-output-buffer-limit</span> <span class="string">normal</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="string">client-output-buffer-limit</span> <span class="string">slave</span> <span class="number">256</span><span class="string">mb</span> <span class="number">64</span><span class="string">mb</span> <span class="number">60</span></span><br><span class="line"><span class="string">client-output-buffer-limit</span> <span class="string">pubsub</span> <span class="number">32</span><span class="string">mb</span> <span class="number">8</span><span class="string">mb</span> <span class="number">60</span></span><br><span class="line"><span class="string">hz</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#################自定义配置</span></span><br><span class="line"><span class="comment">#系统配置</span></span><br><span class="line"><span class="comment">#vim /etc/sysctl.conf</span></span><br><span class="line"><span class="comment">#vm.overcommit_memory = 1</span></span><br><span class="line"></span><br><span class="line"><span class="string">aof-rewrite-incremental-fsync</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">maxmemory</span> <span class="number">4096</span><span class="string">mb</span></span><br><span class="line"><span class="string">maxmemory-policy</span> <span class="string">allkeys-lru</span></span><br><span class="line"><span class="string">dir</span> <span class="string">/opt/redis/data</span>　　　　　　<span class="comment">#多实例情况下需要修改，例如/data/6380</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#集群配置</span></span><br><span class="line"><span class="string">cluster-enabled</span> <span class="literal">yes</span>   <span class="comment">#启用集群</span></span><br><span class="line"><span class="string">cluster-config-file</span> <span class="string">/opt/redis/6380/nodes.conf</span>   <span class="comment">#多实例情况下需要修改，例如/6380/</span></span><br><span class="line"><span class="string">cluster-node-timeout</span> <span class="number">5000</span>   <span class="comment">#集群超时时间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#从ping主间隔默认10秒</span></span><br><span class="line"><span class="comment">#复制超时时间</span></span><br><span class="line"><span class="comment">#repl-timeout 60</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#远距离主从</span></span><br><span class="line"><span class="comment">#config set client-output-buffer-limit "slave 536870912 536870912 0"</span></span><br><span class="line"><span class="comment">#config set repl-backlog-size 209715200</span></span><br></pre></td></tr></table></figure><h3 id="拷贝redis-conf文件到文件夹中"><a href="#拷贝redis-conf文件到文件夹中" class="headerlink" title="拷贝redis.conf文件到文件夹中"></a>拷贝redis.conf文件到文件夹中</h3><p>cp redis.conf 7000/redis-7000.conf</p><p>mkdir 7000 7001 7002 7003 7004 7005</p><h3 id="将配置文件分别拷贝到7001-7008中，需要修改端口号即可"><a href="#将配置文件分别拷贝到7001-7008中，需要修改端口号即可" class="headerlink" title="将配置文件分别拷贝到7001-7008中，需要修改端口号即可."></a>将配置文件分别拷贝到7001-7008中，需要修改端口号即可.</h3><p>在vim下执行以下命令可以先将文件中的全部7000修改为7001</p><p>:%s/7000/7001/g 注：代表将当前文本的所有的7000替换成7001</p><p>分别将7002-7008的配置文件进行修改</p><p>.创建shell脚本文件启动多个redis服务从7000-7008</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">redis-server 7000/redis-7000.conf &amp;</span><br><span class="line">redis-server 7001/redis-7001.conf &amp;</span><br><span class="line">redis-server 7002/redis-7002.conf &amp;</span><br><span class="line">redis-server 7003/redis-7003.conf &amp;</span><br><span class="line">redis-server 7004/redis-7004.conf &amp;</span><br><span class="line">redis-server 7005/redis-7005.conf &amp;</span><br><span class="line">redis-server 7006/redis-7006.conf &amp;</span><br><span class="line">redis-server 7007/redis-7007.conf &amp;</span><br><span class="line">redis-server 7008/redis-7008.conf &amp;</span><br></pre></td></tr></table></figure><h2 id="创建redis-cluster"><a href="#创建redis-cluster" class="headerlink" title="创建redis-cluster"></a>创建redis-cluster</h2><p>通过redis-trib.rb来创建redis集群，</p><p>1、安装的ruby，通过yum 源下载安装的ruby可能版本过低，导致:</p><p>输入命令 “ gem install redis “ 出现 “ ERROR: Error installing redis redis requires Ruby version &gt;= 2.2.2. “</p><p>所以要安装ruby的RVM管理工具获取ruby的最新包</p><p>使用curl安装rvm ，输入命令 “ curl -L get.rvm.io | bash -s stable “ 进行安装，这个时候可能会出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GPG signature verification failed for ‘/usr/local/rvm/archives/rvm-1.29.3.tgz‘ - ‘https://github.com/rvm/rvm/releases/download/1.29.3/1.29.3.tar.gz.asc‘! Try to install GPG v2 and then fetch the public key:</span><br></pre></td></tr></table></figure><p>这时候要输入密钥 <code>gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3</code></p><p>然后在执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L get.rvm.io | bash -s stable</span><br><span class="line">source /usr/local/rvm/scripts/rvm</span><br></pre></td></tr></table></figure><p>查看rvm中管理的所有ruby版本，<br>输入命令 <code>rvm list known</code>进行查询，查询出来如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"># MRI Rubies</span><br><span class="line">[ruby-]1.8.6[-p420]</span><br><span class="line">[ruby-]1.8.7[-head] # security released on head</span><br><span class="line">[ruby-]1.9.1[-p431]</span><br><span class="line">[ruby-]1.9.2[-p330]</span><br><span class="line">[ruby-]1.9.3[-p551]</span><br><span class="line">[ruby-]2.0.0[-p648]</span><br><span class="line">[ruby-]2.1[.10]</span><br><span class="line">[ruby-]2.2[.7]</span><br><span class="line">[ruby-]2.3[.4]</span><br><span class="line">[ruby-]2.4[.1]</span><br><span class="line">ruby-head</span><br><span class="line"></span><br><span class="line"># for forks use: rvm install ruby-head-&lt;name&gt; --url https://github.com/github/ruby.git --branch 2.2</span><br><span class="line"></span><br><span class="line"># JRuby</span><br><span class="line">jruby-1.6[.8]</span><br><span class="line">jruby-1.7[.27]</span><br><span class="line">jruby[-9.1.13.0]</span><br><span class="line">jruby-head</span><br><span class="line"></span><br><span class="line"># Rubinius</span><br><span class="line">rbx-1[.4.3]</span><br><span class="line">rbx-2.3[.0]</span><br><span class="line">rbx-2.4[.1]</span><br><span class="line">rbx-2[.5.8]</span><br><span class="line">rbx-3[.84]</span><br><span class="line">rbx-head</span><br><span class="line"></span><br><span class="line"># Opal</span><br><span class="line">opal</span><br><span class="line"></span><br><span class="line"># Minimalistic ruby implementation - ISO 30170:2012</span><br><span class="line">mruby-1.0.0</span><br><span class="line">mruby-1.1.0</span><br><span class="line">mruby-1.2.0</span><br><span class="line">mruby-1[.3.0]</span><br><span class="line">mruby[-head]</span><br><span class="line"></span><br><span class="line"># Ruby Enterprise Edition</span><br><span class="line">ree-1.8.6</span><br><span class="line">ree[-1.8.7][-2012.02]</span><br><span class="line"></span><br><span class="line"># Topaz</span><br><span class="line">topaz</span><br><span class="line"></span><br><span class="line"># MagLev</span><br><span class="line">maglev[-head]</span><br><span class="line">maglev-1.0.0</span><br><span class="line"></span><br><span class="line"># Mac OS X Snow Leopard Or Newer</span><br><span class="line">macruby-0.10</span><br><span class="line">macruby-0.11</span><br><span class="line">macruby[-0.12]</span><br><span class="line">macruby-nightly</span><br></pre></td></tr></table></figure><p>选择一个你喜欢的版本进行安装，但首先提醒一下，你所选择的版本不能低于 “ 2.0.0 “ 就可以了，输入命令 “ rvm install 2.3.4 “ 进行安装，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_12_centos ~]# rvm install 2.3.4</span><br><span class="line">Searching for binary rubies, this might take some time.</span><br><span class="line">Found remote file https://rvm_io.global.ssl.fastly.net/binaries/centos/7/x86_64/ruby-2.3.4.tar.bz2</span><br><span class="line">Checking requirements for centos.</span><br><span class="line">Installing requirements for centos.</span><br><span class="line">Installing required packages: libffi-devel, readline-devel, sqlite-devel, zlib-devel, libyaml-devel, openssl-devel.............</span><br><span class="line">Requirements installation successful.</span><br><span class="line">ruby-2.3.4 - #configure</span><br><span class="line">ruby-2.3.4 - #download</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100 25.2M  100 25.2M    0     0   461k      0  0:00:55  0:00:55 --:--:--  225k</span><br><span class="line">No checksum for downloaded archive, recording checksum in user configuration.</span><br><span class="line">ruby-2.3.4 - #validate archive</span><br><span class="line">ruby-2.3.4 - #extract</span><br><span class="line">ruby-2.3.4 - #validate binary</span><br><span class="line">ruby-2.3.4 - #setup</span><br><span class="line">ruby-2.3.4 - #gemset created /usr/local/rvm/gems/ruby-2.3.4@global</span><br><span class="line">ruby-2.3.4 - #importing gemset /usr/local/rvm/gemsets/global.gems..............................</span><br><span class="line">ruby-2.3.4 - #generating global wrappers........</span><br><span class="line">ruby-2.3.4 - #gemset created /usr/local/rvm/gems/ruby-2.3.4</span><br><span class="line">ruby-2.3.4 - #importing gemsetfile /usr/local/rvm/gemsets/default.gems evaluated to empty gem list</span><br><span class="line">ruby-2.3.4 - #generating default wrappers........</span><br></pre></td></tr></table></figure><p>redis-trib.rb命令与redis-cli命令放置在同一个目录中，可全路径执行或者创建别名。</p><p>redis-trib.rb create –replicas 1 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:70005</p><p>–replicas 1 表示一主一从，</p><h4 id="脚本使用帮助"><a href="#脚本使用帮助" class="headerlink" title="脚本使用帮助"></a>脚本使用帮助</h4><ul><li>查看脚本帮助</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">$ ruby redis-trib.rb help</span><br><span class="line">Usage: redis-trib &lt;command&gt; &lt;options&gt; &lt;arguments ...&gt;</span><br><span class="line"></span><br><span class="line">  create          host1:port1 ... hostN:portN</span><br><span class="line">                  --replicas &lt;arg&gt;</span><br><span class="line">  check           host:port</span><br><span class="line">  info            host:port</span><br><span class="line">  fix             host:port</span><br><span class="line">                  --timeout &lt;arg&gt;</span><br><span class="line">  reshard         host:port</span><br><span class="line">                  --from &lt;arg&gt;</span><br><span class="line">                  --to &lt;arg&gt;</span><br><span class="line">                  --slots &lt;arg&gt;</span><br><span class="line">                  --yes</span><br><span class="line">                  --timeout &lt;arg&gt;</span><br><span class="line">                  --pipeline &lt;arg&gt;</span><br><span class="line">  rebalance       host:port</span><br><span class="line">                  --weight &lt;arg&gt;</span><br><span class="line">                  --auto-weights</span><br><span class="line">                  --use-empty-masters</span><br><span class="line">                  --timeout &lt;arg&gt;</span><br><span class="line">                  --simulate</span><br><span class="line">                  --pipeline &lt;arg&gt;</span><br><span class="line">                  --threshold &lt;arg&gt;</span><br><span class="line">  add-node        new_host:new_port existing_host:existing_port</span><br><span class="line">                  --slave</span><br><span class="line">                  --master-id &lt;arg&gt;</span><br><span class="line">  del-node        host:port node_id</span><br><span class="line">  set-timeout     host:port milliseconds</span><br><span class="line">  call            host:port command arg arg .. arg</span><br><span class="line">  import          host:port</span><br><span class="line">                  --from &lt;arg&gt;</span><br><span class="line">                  --copy</span><br><span class="line">                  --replace</span><br><span class="line">  help            (show this help)</span><br><span class="line"></span><br><span class="line">For check, fix, reshard, del-node, set-timeout you can specify the host and port of any working node in the cluster.</span><br></pre></td></tr></table></figure><ul><li>各选项详解</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1、create：创建集群</span><br><span class="line">2、check：检查集群</span><br><span class="line">3、info：查看集群信息</span><br><span class="line">4、fix：修复集群</span><br><span class="line">5、reshard：在线迁移slot</span><br><span class="line">6、rebalance：平衡集群节点slot数量</span><br><span class="line">7、add-node：将新节点加入集群</span><br><span class="line">8、del-node：从集群中删除节点</span><br><span class="line">9、set-timeout：设置集群节点间心跳连接的超时时间</span><br><span class="line">10、call：在集群全部节点上执行命令</span><br><span class="line">11、import：将外部redis数据导入集群</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>codis安装及配置</title>
      <link href="/2017/12/12/codis%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/12/12/codis%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="codis安装及配置"><a href="#codis安装及配置" class="headerlink" title="codis安装及配置"></a>codis安装及配置</h1><h2 id="一、环境安装"><a href="#一、环境安装" class="headerlink" title="一、环境安装"></a>一、环境安装</h2><p><strong>系统环境centos</strong></p><ol><li><p>Golang 环境搭建: yum install go</p></li><li><p>codis 下载和编译:</p><p>go get -u -d github.com/CodisLabs/codis<br>cd $GOPATH/src/github.com/CodisLabs/codis<br>make<br>make gotest<br>mkdir -p /usr/local/codis/{logs,conf,scripts}<br>cp –rf bin /usr/local/codis/<br>cp config.ini /usr/local/codis/conf/</p></li></ol><ol start="3"><li><p>Codis-HA 编译<br>Codis-HA。这是一个通过 Codis 开放的 api 实现自动切换主从的工具。该工具会在检测<br>到 master 挂掉的时候将其下线并选择其中一个 slave 提升为 master 继续提供服务。<br>go get github.com/ngaut/codis-ha<br>cd codis-ha<br>go build<br>codis-ha –codis-config=localhost:18087 –productName=test</p></li><li><p>Zookeeper集群搭建</p><p>首先安装开发工具及openjdk，zookeeper是由Java语言开发的，所以需要openjdk环境。</p></li></ol><p>首先安装开发工具及openjdk，zookeeper是由Java语言开发的，所以需要openjdk环境。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall &quot;Development tools&quot; &quot;Compatibility libraries&quot; -y </span><br><span class="line">yum install openssl-devel openssl -y</span><br><span class="line">yum install java-1.8.0-openjdk-devel java-1.8.0-openjdk -y</span><br></pre></td></tr></table></figure><p>确定Java运行环境正常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">  openjdk version &quot;1.8.0101&quot;</span><br><span class="line">  OpenJDK Runtime Environment (build 1.8.0101-b13)</span><br><span class="line">  OpenJDK 64-Bit Server VM (build 25.101-b13, mixed mode)</span><br></pre></td></tr></table></figure><p>安装二进制版本的zookeeper</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar xvf zookeeper-3.4.9.tar.gz -C /usr/local/ </span><br><span class="line">ln -s /usr/local/zookeeper-3.4.9/ /usr/local/zookeeper </span><br><span class="line">cd /usr/local/zookeeper/conf </span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><p>编译zookeeper配置文件/usr/local/zookeeper/conf/zoo.cfg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">maxClientCnxns=60</span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/data/zookeeper/db</span><br><span class="line">dataLogDir=/data/zookeeper/log</span><br><span class="line">clientPort=2181</span><br><span class="line"># cluster configure</span><br><span class="line">server.1=10.173.225.60:2888:3888</span><br><span class="line">server.2=10.174.33.81:2888:3888</span><br><span class="line">server.3=10.173.224.34:2888:3888</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/zookeeper/&#123;db,log&#125; -p</span><br></pre></td></tr></table></figure><p>其中2888表示zookeeper程序监听端口，3888表示zookeeper选举通信端口。</p><p>下面需要生成ID，这里需要注意，myid对应的zoo.cfg的server.ID，比如第二台zookeeper主机对应的myid应该是2，以此类推，三个主机分别为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10.173.225.60 echo 1 &gt; /data/zookeeper/db/myid</span><br><span class="line">10.174.33.81 echo 2 &gt; /data/zookeeper/db/myid</span><br><span class="line">10.173.224.34 echo 3 &gt; /data/zookeeper/db/myid</span><br></pre></td></tr></table></figure><p>然后输出环境变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:/usr/local/zookeeper/bin/</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>然后就可以启动zookeeper了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkServer.sh start</span><br></pre></td></tr></table></figure><p>查看各个zookeeper节点的状态（会有一个leader节点，两个follower节点）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# zkServer.sh status </span><br><span class="line">Mode: follower</span><br><span class="line">[root@node2 ~]# zkServer.sh status </span><br><span class="line">Mode: leader</span><br><span class="line">[root@node3 ~]# zkServer.sh status </span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure><p>客户端连接，可以查看相关信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkCli.sh -server 127.0.0.1:2181</span><br></pre></td></tr></table></figure><p>至此，zookeeper已经搞定了。</p><h2 id="二、启动服务"><a href="#二、启动服务" class="headerlink" title="二、启动服务"></a>二、启动服务</h2><p>再编译后的codis文件夹下有启动服务的脚本</p><h3 id="启动codis-dashboard"><a href="#启动codis-dashboard" class="headerlink" title="启动codis-dashboard"></a>启动codis-dashboard</h3><p>使用 <code>codis-dashboard-admin.sh</code> 脚本启动 dashboard，并查看 dashboard 日志确认启动是否有异常。</p><p>dashboard只需要启动一个</p><p>配置文件dashboard.toml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Set Coordinator, only accept &quot;zookeeper&quot; &amp; &quot;etcd&quot; &amp; &quot;filesystem&quot;.</span><br><span class="line"># for zookeeper/etcd, coorinator_auth accept &quot;user:password&quot;</span><br><span class="line"># Quick Start</span><br><span class="line">coordinator_name = &quot;zookeeper&quot;</span><br><span class="line">coordinator_addr = &quot;10.173.225.60:2181,10.174.33.81:2181,10.173.224.34:2181&quot;</span><br><span class="line">#coordinator_name = &quot;zookeeper&quot;</span><br><span class="line">#coordinator_addr = &quot;127.0.0.1:2181&quot;</span><br><span class="line">#coordinator_auth = &quot;&quot;</span><br><span class="line"></span><br><span class="line"># Set Codis Product Name/Auth.</span><br><span class="line">product_name = &quot;codis-demo&quot;</span><br><span class="line">product_auth = &quot;&quot;</span><br><span class="line"></span><br><span class="line"># Set bind address for admin(rpc), tcp only.</span><br><span class="line">admin_addr = &quot;0.0.0.0:18080&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./admin/codis-dashboard-admin.sh start</span><br><span class="line"> tail -100 ./log/codis-dashboard.log.2017-04-08</span><br></pre></td></tr></table></figure><h3 id="启动codis-fe"><a href="#启动codis-fe" class="headerlink" title="启动codis-fe"></a>启动codis-fe</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/codis-admin --dashboard-list --zookeeper=127.0.0.1:2181 | tee $Gopath/src/github.com/CodisLabs/codis/config/codis.json</span><br></pre></td></tr></table></figure><p>codis.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;codis-demo&quot;,</span><br><span class="line">    &quot;dashboard&quot;: &quot;10.174.33.81:18080&quot;</span><br><span class="line"> &#125;</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><p>启动codis-fe</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup `which codis-fe` --ncpu=2 --log=/data/codis/log/fe.log --log-level=WARN </span><br><span class="line">--dashboard-list=$Gopath/src/github.com/CodisLabs/codis/config/codis.json --listen=0.0.0.0:8080 &amp;</span><br></pre></td></tr></table></figure><h3 id="启动codis-proxy"><a href="#启动codis-proxy" class="headerlink" title="启动codis-proxy"></a>启动codis-proxy</h3><p>使用 <code>codis-proxy-admin.sh</code> 脚本启动 codis-proxy，并查看 proxy 日志确认启动是否有异常。(代理可以启动一个，也可以启动多个，但是启动的多个代理的配置必须是一样的，是同一个dashboard的地址)</p><p>配置文件proxy.toml</p><blockquote><p>19 # Set bind address for admin(rpc), tcp only.</p><p>20 admin_addr = “10.173.225.60:11080”<br>21<br>22 # Set bind address for proxy, proto_type can be “tcp”, “tcp4”, “tcp6”, “unix” or “unixpacket”.<br>23 proto_type = “tcp4”<br>24 proxy_addr = “10.173.225.60:19000”<br>26 # Set jodis address &amp; session timeout<br>27 # 1. jodis_name is short for jodis_coordinator_name, only accept “zookeeper” &amp; “etcd”.<br>28 # 2. jodis_addr is short for jodis_coordinator_addr<br>29 # 3. jodis_auth is short for jodis_coordinator_auth, for zookeeper/etcd, “user:password” is accepted.<br>30 # 4. proxy will be registered as node:<br>31 # if jodis<em>compatible = true (not suggested):32 # /zk/codis/db</em>{PRODUCT_NAME}/proxy-{HASHID} (compatible with Codis2.0)<br>33 # or else<br>34 # /jodis/{PRODUCT_NAME}/proxy-{HASHID}<br>35 jodis_name = “”<br>3 # jodis_addr不能写地址，不然启动报错，不知道为啥，可能没有安装jodis,<br>36 jodis_addr = “”<br>37 jodis_auth = “”<br>38 jodis_timeout = “20s”</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./admin/codis-proxy-admin.sh start</span><br><span class="line">tail -100 ./log/codis-proxy.log.2017-04-08</span><br></pre></td></tr></table></figure><p>要启动多个代理需要修改脚本</p><p>vi codis-proxy-admin.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CODIS_DASHBOARD_ADDR=&quot;10.173.225.60:18080&quot;</span><br></pre></td></tr></table></figure><h3 id="启动codis-server"><a href="#启动codis-server" class="headerlink" title="启动codis-server"></a>启动codis-server</h3><p>使用 <code>codis-server-admin.sh</code> 脚本启动 codis-server，并查看 redis 日志确认启动是否有异常。</p><p>配置redis.conf 和sentinel.conf</p><p><strong>redis.conf</strong></p><blockquote><p>48 # bind 127.0.0.1 ::1<br>49 #<br>50 # WARNING If the computer running Redis is directly exposed to the<br>51 # internet, binding to all the interfaces is dangerous and will expose the<br>52 # instance to everybody on the internet. So by default we uncomment the<br>53 # following bind directive, that will force Redis to listen only into<br>54 # the IPv4 lookback interface address (this means Redis will be able to<br>55 # accept connections only from clients running into the same computer it<br>56 # is running).<br>57 #<br>58 # IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES<br>59 # JUST COMMENT THE FOLLOWING LINE.<br>60 # ~~<br>61 bind 0.0.0.0<br>…….<br>…….<br>82 # Accept connections on the specified port, default is 6379 (IANA #815344).<br>83 # If port 0 is specified Redis will not listen on a TCP socket.<br>84 port 6379</p></blockquote><p><strong>sentinel.conf</strong></p><blockquote><p>48 # bind 127.0.0.1 ::1<br>49 #<br>50 # WARNING If the computer running Redis is directly exposed to the<br>51 # internet, binding to all the interfaces is dangerous and will expose the<br>52 # instance to everybody on the internet. So by default we uncomment the<br>53 # following bind directive, that will force Redis to listen only into<br>54 # the IPv4 lookback interface address (this means Redis will be able to<br>55 # accept connections only from clients running into the same computer it<br>56 # is running).<br>57 #<br>58 # IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES<br>59 # JUST COMMENT THE FOLLOWING LINE.<br>60 #~~<br>61 bind 0.0.0.0<br>…….<br>…….<br>82 # Accept connections on the specified port, default is 6379 (IANA #815344).<br>83 # If port 0 is specified Redis will not listen on a TCP socket.<br>84 port 26379</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./admin/codis-server-admin.sh start</span><br><span class="line">tail -100 /tmp/redis_6379.log</span><br></pre></td></tr></table></figure><p>redis.conf 配置中 pidfile、logfile 默认保存在 <code>/tmp</code> 目录，若启动失败，请检查当前用户是否有该目录的读写权限。</p><h3 id="通过fe添加group"><a href="#通过fe添加group" class="headerlink" title="通过fe添加group"></a>通过fe添加group</h3><p>通过web浏览器访问集群管理页面(fe地址:127.0.0.1:8080) 选择我们刚搭建的集群 codis-demo，在 Proxy 栏可看到我们已经启动的 Proxy， 但是 Group 栏为空，因为我们启动的 codis-server 并未加入到集群 添加 <code>NEW GROUP</code>，<code>NEW GROUP</code> 行输入 1，再点击 <code>NEW GROUP</code> 即可 添加 Codis Server，<code>Add Server</code> 行输入我们刚刚启动的 codis-server 地址，添加到我们刚新建的 Group，然后再点击 <code>Add Server</code> 按钮即可，如下图所示<br><img src="/2017/12/12/codis安装及配置/addgroup.jpg" alt=""></p><h3 id="通过fe初始化slot"><a href="#通过fe初始化slot" class="headerlink" title="通过fe初始化slot"></a>通过fe初始化slot</h3><p>新增的集群 slot 状态是 offline，因此我们需要对它进行初始化（将 1024 个 slot 分配到各个 group），而初始化最快的方法可通过 fe 提供的 <code>rebalance all slots</code> 按钮来做，如下图所示，点击此按钮，我们即快速完成了一个集群的搭建。<br><img src="/2017/12/12/codis安装及配置/rebalance_slots.jpg" alt=""><br>每次增加组之后就需要重新执行<strong>Rebalance All Slots</strong></p>]]></content>
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> codis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go性能分析工具</title>
      <link href="/2017/08/23/Go%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/"/>
      <url>/2017/08/23/Go%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<h1 id="为什么需要性能分析"><a href="#为什么需要性能分析" class="headerlink" title="为什么需要性能分析"></a>为什么需要性能分析</h1><p>作为开发，一般在开发过程大多是为了功能的实现和单元测试，当业务量不大的时候，也不会说去过早的分析代码的性能。但是一旦业务量上来，原有开发中代码写的不太好的地方会造成性能瓶颈，这个时候就得需要性能分析工具帮助分析程序在哪块代码上出现了性能瓶颈。才可以有针对性的优化代码。</p><p>很幸运的，go语言官方有提供的性能工具pprof，我们可以很方便的分析程序运行过程中造成瓶颈的地方</p><h1 id="pprof"><a href="#pprof" class="headerlink" title="pprof"></a>pprof</h1><h2 id="什么是pprof"><a href="#什么是pprof" class="headerlink" title="什么是pprof"></a>什么是pprof</h2><p>pprof是Go语言内置的标准方法用来调试Go程序性能。golang官方有提供两种pprof启动的方式，分别是 <a href="https://golang.org/pkg/runtime/pprof/" target="_blank" rel="noopener">runtime/pprof</a>，<a href="https://golang.org/pkg/net/http/pprof/" target="_blank" rel="noopener">net/http/pprof</a> ，它能提取出来应用程序的CPU和内存数据，此外还有运行的代码行数和内容信息。</p><h2 id="pprof文件生成"><a href="#pprof文件生成" class="headerlink" title="pprof文件生成"></a>pprof文件生成</h2><h3 id="runtime-pprof"><a href="#runtime-pprof" class="headerlink" title="runtime/pprof"></a>runtime/pprof</h3><p>此包是方便不是提供web服务的后端程序来进行分析性能</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f, err := os.Create(fmt.Sprintf(<span class="string">"cpu-%s.pprof"</span>, time.Now().Format(<span class="string">"20060102"</span>)))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">"create CPU profile error: "</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := pprof.StartCPUProfile(f); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">"start CPU profile error: "</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> pprof.StopCPUProfile()</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">doSth()</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">//优雅退出</span></span><br><span class="line">sigChan := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal)</span><br><span class="line">exitChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">signal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)</span><br><span class="line">log.Printf(<span class="string">"signal received"</span>, &lt;-sigChan)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := server.Stop(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">exitChan &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-exitChan:</span><br><span class="line"><span class="keyword">case</span> s := &lt;-sigChan:</span><br><span class="line">log.Panicln(<span class="string">"signal received, stopping immediately"</span>, s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doSth</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">rand.Float32()</span><br><span class="line">time.Sleep(<span class="number">500</span> * time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时运行程序会生成关于cpu统计的文件cpu-20170823.pprof</p><p>然后通过命令执行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~ <span class="keyword">go</span> tool pprof .\cpu<span class="number">-20170823.</span>pprof</span><br><span class="line">Type: cpu</span><br><span class="line">Time: Jul <span class="number">19</span>, <span class="number">2018</span> at <span class="number">5</span>:<span class="number">31</span>pm (CST)</span><br><span class="line">Duration: <span class="number">58.32s</span>, Total samples = <span class="number">0</span></span><br><span class="line">Entering interactive mode (<span class="keyword">type</span> <span class="string">"help"</span> <span class="keyword">for</span> commands, <span class="string">"o"</span> <span class="keyword">for</span> options)</span><br><span class="line">(pprof)</span><br></pre></td></tr></table></figure><p>然后就可以在pprof下使用命令了</p><p>可以通过go tool pprof命令查看pprof支持哪些命令。</p><p><a href="https://golang.org/pkg/runtime/pprof/" target="_blank" rel="noopener">runtime/pprof</a>的缺点是必须将程序关闭或者设置信号量来停止pprof的输出，这样才可以使用生产的pprof文件</p><h3 id="net-http-pprof"><a href="#net-http-pprof" class="headerlink" title="net/http/pprof"></a>net/http/pprof</h3><p>对专门提供web服务的程序可以使用此包，可以方便的测试应用程序的性能</p><p>要使用<code>net/http/pprof</code>包很简单，在main.go文件导入包的时候，通过<code>_ &quot;net/http/pprof&quot;</code>方式导入，其实看pprof.go的文件就能知道，实现的原理。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/debug/pprof/"</span>, Index)</span><br><span class="line">http.HandleFunc(<span class="string">"/debug/pprof/cmdline"</span>, Cmdline)</span><br><span class="line">http.HandleFunc(<span class="string">"/debug/pprof/profile"</span>, Profile)</span><br><span class="line">http.HandleFunc(<span class="string">"/debug/pprof/symbol"</span>, Symbol)</span><br><span class="line">http.HandleFunc(<span class="string">"/debug/pprof/trace"</span>, Trace)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过浏览器分析"><a href="#通过浏览器分析" class="headerlink" title="通过浏览器分析"></a>通过浏览器分析</h4><p>pprof.go中最开始先申明一个init函数，这里申明了五个<code>HandleFunc</code>对应的可以在浏览器中可以打开着五个页面</p><p><code>/debug/pprof/</code>页面是首页，可以查看go程序的堆栈、goroutine、线程等信息</p><p><img src="/2017/08/23/Go性能分析工具/debug_pprof.png" alt=""></p><p>一般如果要获取cpu的信息，生成pprof文件，则直接访问<code>/debug/pprof/profile</code>，</p><p>通过代码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Profile</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">sec, _ := strconv.ParseInt(r.FormValue(<span class="string">"seconds"</span>), <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line"><span class="keyword">if</span> sec == <span class="number">0</span> &#123;</span><br><span class="line">sec = <span class="number">30</span></span><br><span class="line">&#125;</span><br><span class="line">········</span><br><span class="line"><span class="keyword">if</span> err := pprof.StartCPUProfile(w); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// StartCPUProfile failed, so no writes yet.</span></span><br><span class="line"><span class="comment">// Can change header back to text content</span></span><br><span class="line"><span class="comment">// and send error code.</span></span><br><span class="line">w.Header().Set(<span class="string">"Content-Type"</span>, <span class="string">"text/plain; charset=utf-8"</span>)</span><br><span class="line">w.Header().Set(<span class="string">"X-Go-Pprof"</span>, <span class="string">"1"</span>)</span><br><span class="line">w.WriteHeader(http.StatusInternalServerError)</span><br><span class="line">fmt.Fprintf(w, <span class="string">"Could not enable CPU profiling: %s\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">sleep(w, time.Duration(sec)*time.Second)</span><br><span class="line">pprof.StopCPUProfile()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出<code>Profile</code>函数接收一个cpu收集时间，是按秒为单位收集的，如果，不填的话，默认是30秒的收集时间.</p><p>所以想自定义程序收集cpu的时间的话就可以自己传入手机时间的数值</p><p>比如我要手机1分钟的数据，则只需要<code>localhost:8080/debug/pprof/profile?seconds=60</code>.这样的话，程序就会进入60秒的cpu收集时间，等到收集完成后，会返回一个profile的二进制文件，我们可以给重命名为<code>cpu.pprof</code>，然后就可以使用go tool pprof cpu.pprof 来进行性能分析了。</p><p>同理内存分析可以通过访问<code>localhost:8080/debug/pprof/heap</code></p><h4 id="通过命令行来分析"><a href="#通过命令行来分析" class="headerlink" title="通过命令行来分析"></a>通过命令行来分析</h4><p>可以通过命令收集cpu</p><p><code>go tool pprof http://localhost:8080/debug/pprof/profile</code></p><p>同样可以进行数据收集，当然，可以后面设置参数(<code>--seconds 25</code>表示设置25秒)，默认是30秒的收集时间。收集完成后悔进入pprof模式下</p><p><img src="/2017/08/23/Go性能分析工具/client_pprof.png" alt=""></p><p>也可以通过命令收集内存<code>go tool pprof http://localhost:8080/debug/pprof/heap</code></p><h2 id="pprof文件分析"><a href="#pprof文件分析" class="headerlink" title="pprof文件分析"></a>pprof文件分析</h2><p>接下来就是重点，如何分析我们pprof文件：</p><p>在进入pprof状态之后，可以使用top命令来查看，最耗费资源的是哪些函数</p><p><img src="/2017/08/23/Go性能分析工具/analyze.png" alt=""></p><p>这里分析下各个参数的意思</p><h3 id="flat和cum"><a href="#flat和cum" class="headerlink" title="flat和cum:"></a>flat和cum:</h3><p>Flat表示给定函数的持续时间，cum表示当前函数的累加调用。 比如有一个函数a()调用函数b()和函数c(),</p><p>函数b()耗时1秒，函数b()耗时两秒，那么cum就是1+2=3s</p><p>flat表示的是a()函数自己耗费的时间</p><p>如果a()函数是这样的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b() <span class="comment">// takes 2s</span></span><br><span class="line">do something directly <span class="comment">// takes 3s</span></span><br><span class="line">c() <span class="comment">// takes 2s</span></span><br></pre></td></tr></table></figure><p>那么a函数的cum值是6秒，flat是3秒（假设do something directly里面没有函数调用）</p><h3 id="sum"><a href="#sum" class="headerlink" title="sum:"></a>sum:</h3><p>要理解sum需要看上图，第一个sum是25%和flat的25%是相同的，然后第二个sum是50%,是第一个flat的25%加上第二个flat的25%，以此类推。</p><p>具体可以参考：</p><p><a href="https://www.reddit.com/r/golang/comments/7ony5f/what_is_the_meaning_of_flat_and_cum_in_golang/" target="_blank" rel="noopener">What is the meaning of “flat” and “cum” in golang pprof output</a></p><h3 id="图形分析"><a href="#图形分析" class="headerlink" title="图形分析"></a>图形分析</h3><p>只是通过top命令来查看分析数据的话，太过抽象也不好分析，go tool pprof中也有工具可以把生成的pprof文件转换成图形工具，但是需要事先安装 graphviz 。</p><p>安装好之后可以直接使用命令来生成图片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@iZbp14ouog5ocoeakj39q1Z guess]# <span class="keyword">go</span> tool pprof  cpu.pprof</span><br><span class="line">Entering interactive mode (<span class="keyword">type</span> <span class="string">"help"</span> <span class="keyword">for</span> commands)</span><br><span class="line">(pprof) svg</span><br><span class="line">Generating report in profile001.svg</span><br><span class="line">(pprof)</span><br></pre></td></tr></table></figure><p>这样就生成了svg图片<code>profile001.svg</code></p><p><img src="/2017/08/23/Go性能分析工具/sum&amp;cum&amp;flat.png" alt=""></p><p>由于我代码中并没有写太多的业务逻辑，所以这里可以看到大部分的耗时多事发生在运行时，四个耗时25%的函数是<code>runtime.memmove</code> <code>runtime.memeqbody</code> <code>runtimecgocall</code> <code>runtime.stdcall</code>.接下来，可以根据图形具体分析程序在哪里耗费资源然后进行优化</p><h2 id="火焰图"><a href="#火焰图" class="headerlink" title="火焰图"></a>火焰图</h2><p>上图的结构给我们的是晦涩难懂的感觉，我们需要寻求更直观，更简单的分析工具。而且使用火焰图不需要安装graphviz</p><p>go-torch是<code>Uber</code>公司开源的一款针对Go语言程序的火焰图生成工具，能收集 stack traces,并把它们整理成火焰图，直观地程序给开发人员。</p><p>go-torch是基于使用BrendanGregg创建的火焰图工具生成直观的图像，很方便地分析Go的各个方法所占用的CPU的时间， 火焰图是一个新的方法来可视化CPU的使用情况，本文中我会展示如何使用它辅助我们排查问题。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>1.首先，我们要配置<code>FlameGraph</code>的脚本</p><blockquote><p>FlameGraph 是profile数据的可视化层工具，已被广泛用于Python和Node</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/brendangregg/FlameGraph.git</span><br></pre></td></tr></table></figure><p>2.检出完成后，把<code>flamegraph.pl</code>拷到我们机器环境变量$PATH的路径中去，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp flamegraph.pl /usr/local/bin</span><br></pre></td></tr></table></figure><p>3.在终端输入 <code>flamegraph.pl -h</code> 是否安装FlameGraph成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ flamegraph.pl -h</span><br><span class="line">Option h is ambiguous (hash, height, help)</span><br><span class="line">USAGE: /usr/local/bin/flamegraph.pl [options] infile &gt; outfile.svg</span><br><span class="line"></span><br><span class="line">    --title       # change title text</span><br><span class="line">    --width       # width of image (default 1200)</span><br><span class="line">    --height      # height of each frame (default 16)</span><br><span class="line">    --minwidth    # omit smaller functions (default 0.1 pixels)</span><br><span class="line">    --fonttype    # font type (default &quot;Verdana&quot;)</span><br><span class="line">    --fontsize    # font size (default 12)</span><br><span class="line">    --countname   # count type label (default &quot;samples&quot;)</span><br><span class="line">    --nametype    # name type label (default &quot;Function:&quot;)</span><br><span class="line">    --colors      # set color palette. choices are: hot (default), mem, io,</span><br><span class="line">                  # wakeup, chain, java, js, perl, red, green, blue, aqua,</span><br><span class="line">                  # yellow, purple, orange</span><br><span class="line">    --hash        # colors are keyed by function name hash</span><br><span class="line">    --cp          # use consistent palette (palette.map)</span><br><span class="line">    --reverse     # generate stack-reversed flame graph</span><br><span class="line">    --inverted    # icicle graph</span><br><span class="line">    --negate      # switch differential hues (blue&lt;-&gt;red)</span><br><span class="line">    --help        # this message</span><br><span class="line"></span><br><span class="line">    eg,</span><br><span class="line">    /usr/local/bin/flamegraph.pl --title=&quot;Flame Graph: malloc()&quot; trace.txt &gt; graph.svg</span><br></pre></td></tr></table></figure><p>4.安装go-torch</p><p>有了flamegraph的支持，我们接下来要使用go-torch展示profile的输出，而安装go-torch很简单，我们使用下面的命令即可完成安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -v github.com/uber/go-torch</span><br></pre></td></tr></table></figure><p>5.使用go-torch -h命令：可以查看go-torch的帮助文档，这里我们根据生产的cpu.pprof文件，通过使用go-torch 命令来生成火焰图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ go-torch -b cpu.pprof -f cpu.svg</span><br><span class="line">INFO[12:38:16] Run pprof command: go tool pprof -raw cpu.pprof</span><br><span class="line">INFO[12:38:16] Writing svg to cpu.svg</span><br></pre></td></tr></table></figure><ul><li><strong>-b：</strong>表示需要被转换成svg的二进制文件</li><li><strong>-f：</strong>表示要生成的svg图片名称</li></ul><p>此时已经将cpu.pprof生成了cpu.svg的火焰图了，可以通过浏览器查看</p><p><img src="/2017/08/23/Go性能分析工具/fire1.png" alt=""></p><p>这就是go-torch生成的火焰图，看起来是不是舒服多了。</p><blockquote><ul><li>火焰图的y轴表示cpu调用方法的先后，比如：<code>bufio.(*Writer).Flush</code>是由<code>net/http.(*chunkWriter).write</code>和<code>net/http.CheckConnErrorWriter.Writer</code>两个函数组成的。</li><li>x轴表示在每个采样调用时间内，方法所占的时间百分比，越宽代表占据cpu时间越多</li></ul></blockquote><p>有了火焰图，我们就可以更清楚的看到哪个方法调用耗时长了，然后不断的修正代码，重新采样，不断优化。</p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="http://lihaoquan.me/2017/1/1/Profiling-and-Optimizing-Go-using-go-torch.html" target="_blank" rel="noopener">Go代码调优利器-火焰图</a></p><p><a href="https://blog.csdn.net/WaltonWang/article/details/54019891" target="_blank" rel="noopener">Golang性能调优(go-torch, go tool pprof)</a></p>]]></content>
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>golang-http包</title>
      <link href="/2017/08/16/golang-http%E5%8C%85/"/>
      <url>/2017/08/16/golang-http%E5%8C%85/</url>
      <content type="html"><![CDATA[<h1 id="http服务"><a href="#http服务" class="headerlink" title="http服务"></a>http服务</h1><p>http包包含http客户端和服务端的实现,利用Get,Head,Post,以及PostForm实现HTTP或者HTTPS的请求.</p><h2 id="1-函数"><a href="#1-函数" class="headerlink" title="1. 函数"></a>1. 函数</h2><h3 id="1-1-服务端函数"><a href="#1-1-服务端函数" class="headerlink" title="1.1 服务端函数"></a>1.1 服务端函数</h3><ol><li><p><code>Handle</code>将handler按照指定的格式注册到<code>DefaultServeMux</code>,<code>ServeMux</code>解释了模式匹配规则</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Handle</span><span class="params">(pattern <span class="keyword">string</span>, handler Handler)</span></span></span><br></pre></td></tr></table></figure></li><li><p><code>HandleFunc</code>同上，主要用来实现动态文件内容的展示，这点与<code>ServerFile()</code>不同的地方。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleFunc</span><span class="params">(pattern <span class="keyword">string</span>, handler <span class="keyword">func</span>(ResponseWriter, *Request)</span>)</span></span><br></pre></td></tr></table></figure></li><li><p><code>ServeFile</code>利用指定的文件或者目录的内容来响应相应的请求.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ServeFile</span><span class="params">(w ResponseWriter, r *Request, name <span class="keyword">string</span>)</span></span></span><br></pre></td></tr></table></figure></li><li><p><code>ListenAndServe</code>监听TCP网络地址addr然后调用具有handler的Serve去处理连接请求.通常情况下Handler是nil,使用默认的DefaultServeMux</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListenAndServe</span><span class="params">(addr <span class="keyword">string</span>, handler Handler)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure></li></ol><h3 id="1-2最简单的http服务"><a href="#1-2最简单的http服务" class="headerlink" title="1.2最简单的http服务"></a>1.2最简单的http服务</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问网页后会发现，提示的不是“无法访问”，而是”页面没找到“，说明http已经开始服务了，只是没有找到页面<br>由此可以看出，访问什么路径显示什么网页 这件事情，和ListenAndServe的第2个参数有关</p><p>由1.1的解析可知，第2个参数是一个 <strong>Hander</strong></p><p>在http包中看到这个 <strong>Hander</strong>接口只有一个方法ServeHTTP</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Handler <span class="keyword">interface</span> &#123;</span><br><span class="line">ServeHTTP(ResponseWriter, *Request)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以只要实现了ServeHTTP(ResponseWriter, *Request)这个方法的struct,那么就可以将这个struct方法放进去，然后被调用</p><p>ServeHTTP方法，他需要2个参数，</p><ol><li>一个是http.ResponseWriter， 往http.ResponseWriter写入什么内容，浏览器的网页源码就是什么内容</li><li>另一个是<em>http.Request，</em>http.Request里面是封装了浏览器发过来的请求（包含路径、浏览器类型等等）</li></ol><h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"io"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> test <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="comment">//结构体a实现了ServeHTTP</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*test)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    io.WriteString(w, <span class="string">"hello world"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.ListenAndServe(<span class="string">":8080"</span>, &amp;test&#123;&#125;)<span class="comment">//第2个参数需要实现Hander的struct，a满足</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在<br>访问localhost:8080的话，可以看到“hello world”<br>访问localhost:8080/abc的话，可以看到“hello world”<br>访问localhost:8080/123的话，可以看到“hello world”<br>事实上访问任何路径都是“hello world”</p><p>当 http.ListenAndServe(“:8080”, &amp;test{})后，开始等待有访问请求</p><p>一旦有访问请求过来，http包回去调用test的ServeHTTP这个方法。并把自己已经处理好的<code>http.ResponseWriter, *http.Request</code>传进去</p><p>而test的ServeHTTP这个方法，拿到<code>*http.ResponseWriter</code>后，并往里面写东西，客户端的网页就显示出来了</p><p>一、从源码可以理解:这里会将Handler赋值给Server</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ListenAndServe always returns a non-nil error.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListenAndServe</span><span class="params">(addr <span class="keyword">string</span>, handler Handler)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">server := &amp;Server&#123;Addr: addr, Handler: handler&#125;</span><br><span class="line"><span class="keyword">return</span> server.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二、</p><p>这里是server.ListenAndServe()———–&gt;回去调用go c.server(ctx)</p><p>其中c是<code>c := srv.newConn(rw)</code></p><p>然后<code>c.server(ctx)</code>这个函数中会调用<code>serverHandler{c.server}.ServeHTTP(w, w.req)</code>这个方法</p><p>这里serverHandler组合了Server结构体</p><p>这里当handler为空的时候就调用默认的DefaultServeMux，当不为空的时候就会去调用handler.ServeHTTP</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// serverHandler delegates to either the server's Handler or</span></span><br><span class="line"><span class="comment">// DefaultServeMux and also handles "OPTIONS *" requests.</span></span><br><span class="line"><span class="keyword">type</span> serverHandler <span class="keyword">struct</span> &#123;</span><br><span class="line">srv *Server</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sh serverHandler)</span> <span class="title">ServeHTTP</span><span class="params">(rw ResponseWriter, req *Request)</span></span> &#123;</span><br><span class="line">handler := sh.srv.Handler</span><br><span class="line"><span class="keyword">if</span> handler == <span class="literal">nil</span> &#123;</span><br><span class="line">handler = DefaultServeMux</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> req.RequestURI == <span class="string">"*"</span> &amp;&amp; req.Method == <span class="string">"OPTIONS"</span> &#123;</span><br><span class="line">handler = globalOptionsHandler&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">handler.ServeHTTP(rw, req)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的解析就可以知道网页解析是通过调用ServeHTTP方法来的</p><p>###2.3、ServeMux的作用</p><p>先看ServeMux的结构体:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ServeMux <span class="keyword">struct</span> &#123;</span><br><span class="line">   mu    sync.RWMutex</span><br><span class="line">   m     <span class="keyword">map</span>[<span class="keyword">string</span>]muxEntry</span><br><span class="line">   hosts <span class="keyword">bool</span> <span class="comment">// whether any patterns contain hostnames</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> muxEntry <span class="keyword">struct</span> &#123;</span><br><span class="line">   explicit <span class="keyword">bool</span></span><br><span class="line">   h        Handler</span><br><span class="line">   pattern  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从结构体中可以看出ServeMux有一个map属性，map属性的value是个muxEntry类型，这个类型中有一个Handler属性，可以推测看看此ServerMux的m属性的key保存的是url，muxEntry是一个Handler方法</p><p>然后看代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">    <span class="string">"io"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> b <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*b)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    io.WriteString(w, <span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    mux := http.NewServeMux()<span class="comment">//新建一个ServeMux。</span></span><br><span class="line">    mux.Handle(<span class="string">"/h"</span>, &amp;b&#123;&#125;)<span class="comment">//注册路由，把"/"注册给b这个实现Handler接口的struct，注册到map表中。</span></span><br><span class="line">    http.ListenAndServe(<span class="string">":8080"</span>, mux)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>mux.Handle内部</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Handle registers the handler for the given pattern.</span></span><br><span class="line"><span class="comment">// If a handler already exists for pattern, Handle panics.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mux *ServeMux)</span> <span class="title">Handle</span><span class="params">(pattern <span class="keyword">string</span>, handler Handler)</span></span> &#123;</span><br><span class="line">   mux.mu.Lock()</span><br><span class="line">   <span class="keyword">defer</span> mux.mu.Unlock()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> pattern == <span class="string">""</span> &#123;</span><br><span class="line">      <span class="built_in">panic</span>(<span class="string">"http: invalid pattern "</span> + pattern)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> handler == <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="built_in">panic</span>(<span class="string">"http: nil handler"</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> mux.m[pattern].explicit &#123;</span><br><span class="line">      <span class="built_in">panic</span>(<span class="string">"http: multiple registrations for "</span> + pattern)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> mux.m == <span class="literal">nil</span> &#123;</span><br><span class="line">      mux.m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]muxEntry)</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">//将路由作为key，然后将handler和路由以及显示调用设置为true</span></span><br><span class="line">   mux.m[pattern] = muxEntry&#123;explicit: <span class="literal">true</span>, h: handler, pattern: pattern&#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> pattern[<span class="number">0</span>] != <span class="string">'/'</span> &#123;</span><br><span class="line">      mux.hosts = <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line">   ....</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>所以可以看出ServeMux是通过一个map将路由以及函数存起来的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mux *ServeMux)</span> <span class="title">Handle</span><span class="params">(pattern <span class="keyword">string</span>, handler Handler)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>这个函数接收的第一个参数是<strong>路由</strong>，第二个参数是一个<strong>Handler</strong>。这个Handler和上面ListenAndServe的第二个参数是一样的是只有一个ServeHTTP(ResponseWriter, *Request)方法的接口。所以此处的handler需要实现ServeHTTP方法。</p><p>运行时，因为第二个参数是mux，所以http会调用mux的ServeHTTP方法。ServeHTTP方法执行时，会检查map表（表里有一条数据，key是“/h”，value是&amp;b{}的ServeHTTP方法）</p><p>如果用户访问<code>/h</code>的话，mux因为匹配上了，mux的ServeHTTP方法会去调用&amp;b{}的 ServeHTTP方法，从而打印hello<br>如果用户访问<code>/abc</code>的话，mux因为没有匹配上，从而打印404 page not found</p><h3 id="2-4、ServeMux的HandleFunc方法"><a href="#2-4、ServeMux的HandleFunc方法" class="headerlink" title="2.4、ServeMux的HandleFunc方法"></a>2.4、ServeMux的HandleFunc方法</h3><p>ServeMux有一个HandleFunc方法，此方法直接调用handle函数并实现了ServeHTTP</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mux *ServeMux)</span> <span class="title">HandleFunc</span><span class="params">(pattern <span class="keyword">string</span>, handler <span class="keyword">func</span>(ResponseWriter, *Request)</span>)</span> &#123;</span><br><span class="line">   mux.Handle(pattern, HandlerFunc(handler))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(ResponseWriter, *Request)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// <span class="title">ServeHTTP</span> <span class="title">calls</span> <span class="title">f</span><span class="params">(w, r)</span>.</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(f HandlerFunc)</span> <span class="title">ServeHTTP</span><span class="params">(w ResponseWriter, r *Request)</span></span> &#123;</span><br><span class="line">   f(w, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以使用HandlerFunc的时候</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">    <span class="string">"io"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    mux := http.NewServeMux()</span><br><span class="line">    mux.HandleFunc(<span class="string">"/h"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        io.WriteString(w, <span class="string">"hello"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    mux.HandleFunc(<span class="string">"/bye"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        io.WriteString(w, <span class="string">"byebye"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    mux.HandleFunc(<span class="string">"/hello"</span>, sayhello)</span><br><span class="line">    http.ListenAndServe(<span class="string">":8080"</span>, mux)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayhello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    io.WriteString(w, <span class="string">"hello world"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go单元测试</title>
      <link href="/2017/06/23/Go%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2017/06/23/Go%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<h1 id="为什么需要单元测试"><a href="#为什么需要单元测试" class="headerlink" title="为什么需要单元测试"></a>为什么需要单元测试</h1><p> 开发程序其中很重要的一点是测试，我们如何保证代码的质量，如何保证每个函数是可运行，运行结果是正确的，又如何保证写出来的代码性能是好的，我们知道单元测试的重点在于发现程序设计或实现的逻辑错误，使问题及早暴露，便于问题的定位解决。对一个包做（单元）测试，需要写一些可以频繁（每次更新后）执行的小块测试单元来检查代码的正确性。于是我们必须写一些 Go 源文件来测试代码。测<strong>试程序必须属于被测试的包</strong>，并且文件名满足这种形式 <code>*_test.go</code>，所以测试代码和包中的业务代码是分开的。</p><p> Go语言中自带有一个轻量级的测试框架<code>testing</code>和自带的<code>go test</code>命令来实现单元测试和性能测试，<code>testing</code>框架和其他语言中的测试框架类似，你可以基于这个框架写针对相应函数的测试用例。</p><p><code>_test</code> 程序不会被普通的 Go 编译器编译，所以当放应用部署到生产环境时它们不会被部署；只有 gotest 会编译所有的程序：普通程序和测试程序。</p><p>另外建议安装<a href="https://github.com/cweill/gotests" target="_blank" rel="noopener">gotests</a>插件自动生成测试代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u -v github.com/cweill/gotests/...</span><br></pre></td></tr></table></figure><p>go单元测试的命令是</p><p><code>go test</code></p><p>go test 只会输出错误的信息，想要看详细的信息使用<code>go test -v</code></p><h1 id="Go的自带单元测试的编写"><a href="#Go的自带单元测试的编写" class="headerlink" title="Go的自带单元测试的编写"></a>Go的自带单元测试的编写</h1><h2 id="1、如何编写测试用例"><a href="#1、如何编写测试用例" class="headerlink" title="1、如何编写测试用例"></a>1、如何编写测试用例</h2><p>接下来我们在该目录下面创建两个文件：even.go和oddeven_test.go<br><strong>even.go:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">用来测试前 100 个整数是否是偶数。这个函数属于 even 包。</span><br><span class="line">*/</span><br><span class="line">package even</span><br><span class="line">func Even(i int) bool &#123;</span><br><span class="line">return i%2 == 0</span><br><span class="line">&#125;</span><br><span class="line">func Odd(i int) bool &#123;</span><br><span class="line">return i%2 != 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>oddeven_test.go:这是我们的单元测试文件，</strong></p><h3 id="1-1测试文件的规则："><a href="#1-1测试文件的规则：" class="headerlink" title="1.1测试文件的规则："></a><strong>1.1测试文件的规则：</strong></h3><ol><li>文件名必须是<code>_test.go</code>结尾的，这样在执行<code>go test</code>的时候才会执行到相应的代码</li><li>你必须import <code>testing</code>这个包</li><li>所有的测试用例函数必须是<code>Test</code>开头</li><li>测试用例会按照源代码中写的顺序依次执行</li><li>测试函数<code>TestXxx()</code>的参数是<code>testing.T</code>，我们可以使用该类型来记录错误或者是测试状态</li><li>测试格式：<code>func TestXxx (t *testing.T)</code>,<code>Xxx</code>部分可以为任意的字母数字的组合，但是首字母不能是小写字母[a-z]，例如<code>Testintdiv</code>是错误的函数名。</li><li>函数中通过调用<code>testing.T</code>的<code>Error</code>, <code>Errorf</code>, <code>FailNow</code>, <code>Fatal</code>, <code>FatalIf</code>方法，说明测试不通过，调用<code>Log</code>方法用来记录测试的信息。</li></ol><p><strong>oddeven_test.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> even</span><br><span class="line"><span class="keyword">import</span> <span class="string">"testing"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestEven</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> !Even(<span class="number">10</span>) &#123; <span class="comment">//!Even(10)==false,不会向下执行</span></span><br><span class="line">t.Log(<span class="string">"10 must be even"</span>)</span><br><span class="line">t.Fail()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> Even(<span class="number">7</span>) &#123;</span><br><span class="line">t.Log(<span class="string">"7 is not even"</span>)</span><br><span class="line">t.Fatal()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> Even(<span class="number">10</span>) &#123; <span class="comment">//Even(10)==true,但是为了测试，让它执行t.Log()和 t.Fail()</span></span><br><span class="line">t.Log(<span class="string">"Everything OK: 10 is even, just a test to see failed output!"</span>)</span><br><span class="line">t.Fail()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestOdd</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> !Odd(<span class="number">11</span>) &#123;</span><br><span class="line">t.Log(<span class="string">" 11 must be odd!"</span>)</span><br><span class="line">t.Fail()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> Odd(<span class="number">10</span>) &#123;</span><br><span class="line">t.Log(<span class="string">" 10 is not odd!"</span>)</span><br><span class="line">t.Fail()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用go test 运行oddeven_test.go,只会出现错误信息</strong></p><blockquote><p>— FAIL: TestEven (0.00s)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; oddeven_test.go:16: Everything OK: 10 is even, just a test to see failed output!</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>FAIL<br>exit status 1<br>FAIL MyStudy/GolangTest/even 0.364s</p></blockquote><p><strong>使用go test -v，会将详细的信息都打印出来，通过的会有pass标识</strong></p><blockquote><p>=== RUN TestEven<br>— FAIL: TestEven (0.00s)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; oddeven_test.go:16: Everything OK: 10 is even, just a test to see failed output!</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>=== RUN TestOdd<br>— PASS: TestOdd (0.00s)<br>FAIL<br>exit status 1<br>FAIL MyStudy/GolangTest/even 0.397s</p></blockquote><h3 id="1-2单元测试的一些通知失败的方法"><a href="#1-2单元测试的一些通知失败的方法" class="headerlink" title="1.2单元测试的一些通知失败的方法"></a>1.2单元测试的一些通知失败的方法</h3><p>1）<code>func (t *T) Fail()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标记测试函数为失败，然后继续执行（剩下的测试）。</span><br></pre></td></tr></table></figure><p>2）<code>func (t *T) FailNow()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标记测试函数为失败并中止执行；文件中别的测试也被略过，继续执行下一个文件。</span><br></pre></td></tr></table></figure><p>3）<code>func (t *T) Log(args ...interface{})</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">args 被用默认的格式格式化并打印到错误日志中。</span><br></pre></td></tr></table></figure><p>4）<code>func (t *T) Fatal(args ...interface{})</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结合 先执行 3），然后执行 2）的效果。</span><br></pre></td></tr></table></figure><h1 id="GoGonvey框架写单元测试"><a href="#GoGonvey框架写单元测试" class="headerlink" title="GoGonvey框架写单元测试"></a>GoGonvey框架写单元测试</h1><h2 id="1、GoGonvey框架介绍"><a href="#1、GoGonvey框架介绍" class="headerlink" title="1、GoGonvey框架介绍"></a>1、GoGonvey框架介绍</h2><p> Go 语言虽然自带单元测试功能，在 GoConvey 诞生之前也出现了许多第三方辅助库。但没有一个辅助库能够像 GoConvey 这样优雅地书写代码的单元测试，简洁的语法和舒适的界面能够让一个不爱书写单元测试的开发人员从此爱上单元测试。</p><h3 id="1-1、GoGonvey的优点"><a href="#1-1、GoGonvey的优点" class="headerlink" title="1.1、GoGonvey的优点"></a>1.1、GoGonvey的优点</h3><ol><li>GoConvey支持Go的本机<a href="http://golang.org/pkg/testing/" target="_blank" rel="noopener"><code>testing</code></a>包。无论是网页界面还是DSL都不需要; 你可以独立使用任何一个。</li><li>GoConvey集成后<code>**go test**</code>，您可以<a href="https://github.com/smartystreets/goconvey/wiki/Execution" target="_blank" rel="noopener">在终端中</a>继续运行测试<a href="https://github.com/smartystreets/goconvey/wiki/Execution" target="_blank" rel="noopener">，</a>或者使用自动更新Web UI进行测试。</li><li>GoConvey还有web UI可以来方便查看代码覆盖率，以及单元测试错误信息</li></ol><h3 id="1-2、安装GoGonvey"><a href="#1-2、安装GoGonvey" class="headerlink" title="1.2、安装GoGonvey"></a>1.2、安装GoGonvey</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/smartystreets/goconvey</span><br></pre></td></tr></table></figure><h3 id="1-3、快速开始一个例子"><a href="#1-3、快速开始一个例子" class="headerlink" title="1.3、快速开始一个例子"></a>1.3、快速开始一个例子</h3><p>写一个oddeven_goconvey_test.go 文件,将test.go改写成convey形式的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> even</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">. <span class="string">"github.com/smartystreets/goconvey/convey"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestEvenConvey</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">Convey(<span class="string">"Given some integer with a starting value"</span>, t, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">Convey(<span class="string">"When the integer is even"</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="comment">//第一个Convey需要t参数，以后的不需要了</span></span><br><span class="line">Convey(<span class="string">"10 must be even"</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">b := Even(<span class="number">10</span>)</span><br><span class="line">So(b, ShouldBeTrue)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Convey(<span class="string">"7 is not even"</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">b := Even(<span class="number">7</span>)</span><br><span class="line">So(b, ShouldBeFalse)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Convey(<span class="string">"Everything OK: 10 is even, just a test to see failed output!"</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">b := Even(<span class="number">10</span>)</span><br><span class="line">So(b, ShouldBeFalse)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 使用 GoConvey 书写单元测试，每个测试用例需要使用Convey函数包裹起来。它接受的第一个参数为 string 类型的描述；第二个参数一般为*testing.T，即本例中的变量 t；第三个参数为不接收任何参数也不返回任何值的函数（习惯以闭包的形式书写）。</p><p>Convey语句同样可以无限嵌套，以体现各个测试用例之间的关系，例如TestEvenConvey函数就采用了嵌套的方式体现它们之间的关系。需要注意的是，<strong>只有最外层的Convey需要传入变量 t，内层的嵌套均不需要传入</strong>。</p><p>最后，需要使用So语句来对条件进行判断。在本例中，我们只使用了 2 个不同类型的条件判断：ShouldBeTrue和ShouldBeFalse，分别表示值应该为 true、值应该false。</p><p>常用的有</p><ol><li><code>ShouldEqual</code>: 表示值应该想等</li><li><code>ShouldResemble</code>: 进行深度相同检查，要有两个值<code>So(b, ShouldResemble, true)</code></li><li><code>ShouldBeTrue</code>: 表示值应该为true</li><li><code>ShouldBeZeroValue</code>:表示值应该为0</li><li><code>ShouldNotContainSubstring</code>:接收2字符串参数并确保第一个不包含第二个字符串。</li><li><code>ShouldPanic</code>: 表示值应该panic</li></ol><p>有关详细的条件列表，可以参见<a href="https://github.com/smartystreets/goconvey/wiki/Assertions" target="_blank" rel="noopener">官方文档</a>。</p><h3 id="1-4、运行测试"><a href="#1-4、运行测试" class="headerlink" title="1.4、运行测试"></a>1.4、运行测试</h3><h4 id="1-4-1、go-test-v运行"><a href="#1-4-1、go-test-v运行" class="headerlink" title="1.4.1、go test -v运行"></a>1.4.1、go test -v运行</h4><p>现在，可以打开命令行，然后输入<code>go test -v</code>来进行测试。由于 GoConvey 兼容 Go 原生的单元测试，因此我们可以直接使用 Go 的命令来执行测试。 </p><blockquote><p>=== RUN TestEvenConvey</p><p>Given some integer with a starting value<br>When the integer is even<br>10 must be even .<br>7 is not even .<br>Everything OK: 10 is even, just a test to see failed output! x</p><p>Failures: </p><p>D:/gopath/src/MyStudy/GolangTest/even/oddeven_goconvey_test.go</p><p>Line 23:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Expected: false</span><br><span class="line">&gt; Actual:   true</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p> 3 total assertions</p><p>— FAIL: TestEvenConvey (0.00s)<br>FAIL<br>exit status 1<br>FAIL MyStudy/GolangTest/even 0.401s</p></blockquote><p>可以看到给出的信息比go自带的测试包多很多信息</p><h4 id="1-4-2、goconvey-运行测试"><a href="#1-4-2、goconvey-运行测试" class="headerlink" title="1.4.2、goconvey 运行测试"></a>1.4.2、goconvey 运行测试</h4><p>web界面查看数据</p><p>GoConvey 不仅支持在命令行进行人工调用调试命令，还有非常舒适的 Web 界面提供给开发者来进行自动化的编译测试工作。在项目目录下执行<code>goconvey</code> 同时可以打开浏览器查看localhost:8080</p><p><img src="/2017/06/23/Go单元测试/带有错误的convey.png" alt=""></p><p>解析上面图片</p><h3 id="1-5、GoConvey的一些功能"><a href="#1-5、GoConvey的一些功能" class="headerlink" title="1.5、GoConvey的一些功能"></a>1.5、GoConvey的一些功能</h3><h4 id="测试自动运行"><a href="#测试自动运行" class="headerlink" title="测试自动运行"></a>测试自动运行</h4><p> 只需保存<code>.go</code><img src="/2017/06/23/Go单元测试/更新.png" alt="文件或单击图标执行测试">。您的浏览器页面将自动更新。</p><h4 id="覆盖报告"><a href="#覆盖报告" class="headerlink" title="覆盖报告"></a>覆盖报告</h4><p>可以点击左上角的软件包名称来查看<a href="http://blog.golang.org/cover#TOC_5." target="_blank" rel="noopener">Go的详细HTML覆盖率报告</a>。</p><h4 id="黑暗，光和自定义主题"><a href="#黑暗，光和自定义主题" class="headerlink" title="黑暗，光和自定义主题"></a>黑暗，光和自定义主题</h4><p>GoConvey内置了两个主题。（在此页面上<a href="javascript:" target="_blank" rel="noopener">切换主题</a>以尝试！）您还可以使用第三方主题或自己滚动。</p><h4 id="暂停，恢复和审查"><a href="#暂停，恢复和审查" class="headerlink" title="暂停，恢复和审查"></a>暂停，恢复和审查</h4><p>可以暂停自动测试执行，并查看最近的测试历史，以查看代码在何处，何时以及为什么中断。</p><p>在 Web 界面中，您可以设置界面主题，查看完整的测试结果，使用浏览器提醒等实用功能。</p><h4 id="其它功能："><a href="#其它功能：" class="headerlink" title="其它功能："></a>其它功能：</h4><ol><li>自动检测代码变动并编译测试</li><li>半自动化书写测试用例：<a href="http://localhost:8080/composer.html" target="_blank" rel="noopener">http://localhost:8080/composer.html</a></li><li>查看测试覆盖率：<a href="http://localhost:8080/reports/" target="_blank" rel="noopener">http://localhost:8080/reports/</a></li><li>临时屏蔽某个包的编译测试</li></ol>]]></content>
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>defer和追踪</title>
      <link href="/2017/06/15/defer%E5%92%8C%E8%BF%BD%E8%B8%AA/"/>
      <url>/2017/06/15/defer%E5%92%8C%E8%BF%BD%E8%B8%AA/</url>
      <content type="html"><![CDATA[<h2 id="defer关键字"><a href="#defer关键字" class="headerlink" title="defer关键字"></a>defer关键字</h2><p>关键字 defer 允许我们推迟到函数返回之前（或任意位置执行 <code>return</code> 语句之后）一刻才执行某个语句或函数（为什么要在返回之后才执行这些语句？因为 <code>return</code> 语句同样可以包含一些操作，而不是单纯地返回某个值）。</p><p>关键字 defer 的用法类似于面向对象编程语言 Java 和 C# 的 <code>finally</code> 语句块，它一般用于释放某些已分配的资源。</p><h3 id="示例-6-8-defer-go："><a href="#示例-6-8-defer-go：" class="headerlink" title="示例 6.8 defer.go："></a>示例 6.8 <a href="https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer.go">defer.go</a>：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">function1()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">function1</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"In function1 at the top\n"</span>)</span><br><span class="line"><span class="keyword">defer</span> function2()</span><br><span class="line">fmt.Printf(<span class="string">"In function1 at the bottom!\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">function2</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"function2: Deferred until the end of the calling function!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In Function1 at the top</span><br><span class="line">In Function1 at the bottom!</span><br><span class="line">Function2: Deferred until the end of the calling function!</span><br></pre></td></tr></table></figure><p>请将 defer 关键字去掉并对比输出结果。</p><p>使用 defer 的语句同样可以接受参数，下面这个例子就会在执行 defer 语句时打印 <code>0</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">defer</span> fmt.Println(i)</span><br><span class="line">i++</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当有多个 defer 行为被注册时，它们会以逆序执行（类似栈，即后进先出）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Printf(<span class="string">"%d "</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码将会输出：<code>4 3 2 1 0</code>。</p><h3 id="关键字-defer-允许我们进行一些函数执行完成后的收尾工作，"><a href="#关键字-defer-允许我们进行一些函数执行完成后的收尾工作，" class="headerlink" title="关键字 defer 允许我们进行一些函数执行完成后的收尾工作，"></a>关键字 defer 允许我们进行一些函数执行完成后的收尾工作，</h3><p>例如：</p><ol><li><p>关闭文件流：</p><p>// open a file<br>defer file.Close() （详见第 12.2 节）</p></li><li><p>解锁一个加锁的资源</p><p>mu.Lock()<br>defer mu.Unlock() （详见第 9.3 节）</p></li><li><p>打印最终报告</p><p>printHeader()<br>defer printFooter()</p></li><li><p>关闭数据库链接</p><p>// open a database connection<br>defer disconnectFromDB()</p></li></ol><p>合理使用 defer 语句能够使得代码更加简洁。</p><p>以下代码模拟了上面描述的第 4 种情况：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">doDBOperations()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">connectToDB</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"ok, connected to db"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">disconnectFromDB</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"ok, disconnected from db"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doDBOperations</span><span class="params">()</span></span> &#123;</span><br><span class="line">connectToDB()</span><br><span class="line">fmt.Println(<span class="string">"Defering the database disconnect."</span>)</span><br><span class="line"><span class="keyword">defer</span> disconnectFromDB() <span class="comment">//function called here with defer</span></span><br><span class="line">fmt.Println(<span class="string">"Doing some DB operations ..."</span>)</span><br><span class="line">fmt.Println(<span class="string">"Oops! some crash or network error ..."</span>)</span><br><span class="line">fmt.Println(<span class="string">"Returning from function here!"</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="comment">//terminate the program</span></span><br><span class="line"><span class="comment">// deferred function executed here just before actually returning, even if</span></span><br><span class="line"><span class="comment">// there is a return or abnormal termination before</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ok, connected to db</span><br><span class="line">Defering the database disconnect.</span><br><span class="line">Doing some DB operations ...</span><br><span class="line">Oops! some crash or network error ...</span><br><span class="line">Returning from function here!</span><br><span class="line">ok, disconnected from db</span><br></pre></td></tr></table></figure><h3 id="使用-defer-语句实现代码追踪"><a href="#使用-defer-语句实现代码追踪" class="headerlink" title="使用 defer 语句实现代码追踪"></a>使用 defer 语句实现代码追踪</h3><p>一个基础但十分实用的实现代码执行追踪的方案就是在进入和离开某个函数打印相关的消息，即可以提炼为下面两个函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trace</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123; fmt.Println(<span class="string">"entering:"</span>, s) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">untrace</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123; fmt.Println(<span class="string">"leaving:"</span>, s) &#125;</span><br></pre></td></tr></table></figure><p>以下代码展示了何时调用两个函数：</p><p>示例 6.10 <a href="https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_tracing.go">defer_tracing.go</a>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trace</span><span class="params">(s <span class="keyword">string</span>)</span></span>   &#123; fmt.Println(<span class="string">"entering:"</span>, s) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">untrace</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123; fmt.Println(<span class="string">"leaving:"</span>, s) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">()</span></span> &#123;</span><br><span class="line">trace(<span class="string">"a"</span>)</span><br><span class="line"><span class="keyword">defer</span> untrace(<span class="string">"a"</span>)</span><br><span class="line">fmt.Println(<span class="string">"in a"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">b</span><span class="params">()</span></span> &#123;</span><br><span class="line">trace(<span class="string">"b"</span>)</span><br><span class="line"><span class="keyword">defer</span> untrace(<span class="string">"b"</span>)</span><br><span class="line">fmt.Println(<span class="string">"in b"</span>)</span><br><span class="line">a()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">b()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">entering: b</span><br><span class="line">in b</span><br><span class="line">entering: a</span><br><span class="line">in a</span><br><span class="line">leaving: a</span><br><span class="line">leaving: b</span><br></pre></td></tr></table></figure><p>上面的代码还可以修改为更加简便的版本（示例 6.11 <a href="https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_tracing2.go">defer_tracing2.go</a>）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trace</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"entering:"</span>, s)</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">un</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"leaving:"</span>, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> un(trace(<span class="string">"a"</span>))</span><br><span class="line">fmt.Println(<span class="string">"in a"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">b</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> un(trace(<span class="string">"b"</span>))</span><br><span class="line">fmt.Println(<span class="string">"in b"</span>)</span><br><span class="line">a()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">b()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-defer-语句来记录函数的参数与返回值"><a href="#使用-defer-语句来记录函数的参数与返回值" class="headerlink" title="使用 defer 语句来记录函数的参数与返回值"></a>使用 defer 语句来记录函数的参数与返回值</h3><p>下面的代码展示了另一种在调试时使用 defer 语句的手法（示例 6.12 <a href="https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_logvalues.go">defer_logvalues.go</a>）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func1</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">log.Printf(<span class="string">"func1(%q) = %d, %v"</span>, s, n, err)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> <span class="number">7</span>, io.EOF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">func1(<span class="string">"Go"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Output: 2011/10/04 10:46:11 func1(&quot;Go&quot;) = 7, EOF</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
